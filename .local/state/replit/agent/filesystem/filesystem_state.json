{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Brazilian cupcake e-commerce application called \"Doce DelÃ­cia\" built with React on the frontend and Express.js on the backend. The application allows customers to browse cupcakes by category, add items to their cart, manage favorites, and place orders. It features authentication via Replit Auth, a responsive design using shadcn/ui components, and a PostgreSQL database for data persistence.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/building\n- **Routing**: Wouter for client-side routing with authentication-based route protection\n- **State Management**: React Context API for cart state management combined with TanStack Query for server state\n- **UI Components**: shadcn/ui component library with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom CSS variables for theming, featuring a pink/cupcake-themed color scheme\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API with route-based organization serving JSON responses\n- **Session Management**: Express sessions with PostgreSQL session store for persistence\n- **Development Server**: Custom Vite integration for hot module replacement in development\n\n## Data Storage\n- **Primary Database**: PostgreSQL via Neon Database with connection pooling\n- **Schema Management**: Drizzle migrations for database schema versioning\n- **Session Storage**: PostgreSQL table for Express session persistence (required for Replit Auth)\n- **Database Schema**: \n  - Users table (required for Replit Auth integration)\n  - Products with categories, pricing, and inventory\n  - Shopping cart items linked to authenticated users\n  - Orders and order items for purchase history\n  - Favorites system for user preferences\n\n## Authentication & Authorization\n- **Provider**: Replit Auth integration with OpenID Connect\n- **Session Handling**: Express sessions with secure cookie configuration\n- **Protected Routes**: Middleware-based route protection on backend\n- **User Management**: Automatic user creation/updates via Replit Auth claims\n- **Authorization Flow**: OAuth 2.0 with PKCE via Replit's identity provider\n\n# External Dependencies\n\n## Core Infrastructure\n- **Database**: Neon Database (PostgreSQL) for primary data storage\n- **Authentication**: Replit Auth service for user identity management\n- **Hosting**: Designed for Replit deployment environment\n\n## Development Tools\n- **Replit Integrations**: Cartographer and dev banner plugins for Replit environment\n- **Error Handling**: Runtime error overlay for development debugging\n- **Build Tools**: ESBuild for server bundling, Vite for client bundling\n\n## UI & Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Architects Daughter, Source Code Pro)\n- **Image Hosting**: Unsplash for product and hero images\n\n## Data & API\n- **Query Management**: TanStack Query for server state caching and synchronization\n- **Validation**: Zod for runtime type validation and schema definition\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Utilities**: clsx and tailwind-merge for conditional styling","size_bytes":3534},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seedData\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Seed database with cupcake data\n  await seedDatabase();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2173},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],  // Use OIDC subject as the user ID\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\nexport const isAdmin: RequestHandler = async (req: any, res, next) => {\n  if (!req.user?.claims) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n  \n  try {\n    const userId = req.user.claims.sub;\n    const user = await storage.getUser(userId);\n    \n    if (!user?.isAdmin) {\n      res.status(403).json({ message: \"Admin access required\" });\n      return;\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking admin status:\", error);\n    res.status(500).json({ message: \"Failed to verify admin status\" });\n  }\n};\n","size_bytes":4818},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { setupAuth, isAuthenticated, isAdmin } from \"./replitAuth\";\nimport { insertCartItemSchema, insertFavoriteSchema, orders, orderItems, products } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Categories routes\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Products routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      \n      let products;\n      if (featured === 'true') {\n        products = await storage.getFeaturedProducts();\n      } else if (category) {\n        products = await storage.getProductsByCategory(category as string);\n      } else {\n        products = await storage.getProducts();\n      }\n      \n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Cart routes\n  app.get('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItems = await storage.getCartItems(userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItemData = insertCartItemSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const cartItem = await storage.addToCart(cartItemData);\n      res.json(cartItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.put('/api/cart/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const { quantity } = req.body;\n      \n      if (!quantity || quantity < 1) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n      \n      const cartItem = await storage.updateCartItem(id, quantity, userId);\n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found or not owned by user\" });\n      }\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete('/api/cart/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const removed = await storage.removeFromCart(id, userId);\n      if (!removed) {\n        return res.status(404).json({ message: \"Cart item not found or not owned by user\" });\n      }\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.clearCart(userId);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Orders routes\n  app.get('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const orders = await storage.getUserOrders(userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Get order with items using storage interface\n      const orderWithItems = await storage.getOrderWithItems(userId, id);\n      \n      if (!orderWithItems) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      res.json(orderWithItems);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  // Cancel order\n  app.put('/api/orders/:id/cancel', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const order = await storage.cancelOrder(userId, id);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error canceling order:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.post('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Validate input using extended schema\n      const orderRequestSchema = z.object({\n        deliveryAddress: z.string().min(1, \"EndereÃ§o de entrega Ã© obrigatÃ³rio\"),\n        items: z.array(z.object({\n          productId: z.string(),\n          quantity: z.number().int().min(1)\n        })).min(1, \"Pelo menos um item Ã© obrigatÃ³rio\"),\n        couponCode: z.string().nullable().optional(),\n        paymentMethod: z.enum(['pix', 'cod']).optional().default('cod')\n      });\n      \n      const validatedData = orderRequestSchema.parse(req.body);\n      const { deliveryAddress, items, couponCode, paymentMethod } = validatedData;\n      \n      // Determine order status based on payment method\n      const orderStatus = paymentMethod === 'pix' ? 'confirmed' : 'pending';\n\n      // Extract and validate CEP for delivery area restriction\n      const cepMatch = deliveryAddress.match(/\\b\\d{5}-?\\d{3}\\b/);\n      if (!cepMatch) {\n        return res.status(400).json({ \n          message: \"CEP nÃ£o encontrado no endereÃ§o de entrega\" \n        });\n      }\n\n      const cep = cepMatch[0].replace('-', '');\n      \n      // Validate delivery area using ViaCEP\n      try {\n        const cepResponse = await fetch(`https://viacep.com.br/ws/${cep}/json/`);\n        \n        if (!cepResponse.ok) {\n          return res.status(400).json({ \n            message: \"Erro ao verificar CEP para entrega\" \n          });\n        }\n        \n        const cepData = await cepResponse.json();\n        \n        if (cepData.erro) {\n          return res.status(400).json({ \n            message: \"CEP invÃ¡lido\" \n          });\n        }\n\n        // Normalize city name for comparison (remove accents and convert to uppercase)\n        const normalizeCity = (cityName: string): string => {\n          return cityName\n            .normalize('NFD')\n            .replace(/[\\u0300-\\u036f]/g, '')\n            .toUpperCase()\n            .trim();\n        };\n\n        const normalizedCity = normalizeCity(cepData.localidade);\n        const normalizedState = cepData.uf.toUpperCase().trim();\n        \n        // Check if delivery is available for JoÃ£o Pessoa, PB only\n        const isDeliveryAvailable = normalizedCity === 'JOAO PESSOA' && normalizedState === 'PB';\n        \n        if (!isDeliveryAvailable) {\n          return res.status(400).json({ \n            message: \"Entrega nÃ£o disponÃ­vel\",\n            error: `NÃ£o entregamos em ${cepData.localidade}, ${cepData.uf}. Atualmente entregamos apenas em JoÃ£o Pessoa, PB.`\n          });\n        }\n      } catch (error) {\n        console.error(\"Error validating delivery area:\", error);\n        return res.status(400).json({ \n          message: \"Erro ao verificar Ã¡rea de entrega\" \n        });\n      }\n\n      // Validate and deduplicate items\n      const itemsMap = new Map();\n      items.forEach((item: any) => {\n        if (!item.productId || !item.quantity || item.quantity < 1) {\n          throw new Error('Invalid item format');\n        }\n        const quantity = parseInt(item.quantity);\n        if (itemsMap.has(item.productId)) {\n          // Aggregate quantities for duplicate products\n          itemsMap.set(item.productId, itemsMap.get(item.productId) + quantity);\n        } else {\n          itemsMap.set(item.productId, quantity);\n        }\n      });\n      \n      const validatedItems = Array.from(itemsMap.entries()).map(([productId, quantity]) => ({\n        productId,\n        quantity\n      }));\n\n      // Fetch products from database to get real prices\n      const productIds = validatedItems.map(item => item.productId);\n      const products = await storage.getProductsByIds(productIds);\n      \n      if (products.length !== productIds.length) {\n        return res.status(400).json({ message: \"Some products not found\" });\n      }\n\n      // Calculate server-side total using DB prices (in cents to avoid floating point errors)\n      let subtotalCents = 0;\n      const orderItems = validatedItems.map((item: any) => {\n        const product = products.find(p => p.id === item.productId);\n        if (!product || !product.isAvailable) {\n          throw new Error(`Product ${item.productId} not available`);\n        }\n        const priceCents = Math.round(parseFloat(product.price) * 100);\n        const lineTotalCents = priceCents * item.quantity;\n        subtotalCents += lineTotalCents;\n        return {\n          productId: item.productId,\n          quantity: item.quantity,\n          price: product.price // Use DB price, not client price\n        };\n      });\n\n      let order;\n      let appliedCoupon = null;\n      let totals = null;\n      \n      if (couponCode && couponCode.trim()) {\n        try {\n          // Use atomic transaction for order + coupon (validates coupon inside transaction)\n          const result = await storage.createOrderWithCoupon(\n            userId,\n            deliveryAddress,\n            orderItems,\n            couponCode,\n            orderStatus\n          );\n          \n          order = result.order;\n          appliedCoupon = result.appliedCoupon;\n          totals = result.totals;\n        } catch (error: any) {\n          // Handle known coupon errors with user-friendly messages\n          if (error.message.includes('nÃ£o encontrado') || \n              error.message.includes('inativo') ||\n              error.message.includes('expirado') || \n              error.message.includes('esgotado')) {\n            return res.status(400).json({\n              message: \"CÃ³digo de cupom invÃ¡lido\", \n              error: error.message\n            });\n          }\n          throw error; // Re-throw unexpected errors\n        }\n      } else {\n        // No coupon - regular order creation\n        const finalTotal = (subtotalCents / 100).toFixed(2);\n        order = await storage.createOrder(\n          {\n            userId,\n            deliveryAddress,\n            total: finalTotal,\n            status: orderStatus,\n            appliedCouponCode: null,\n            discountAmount: \"0.00\",\n          },\n          orderItems\n        );\n      }\n\n      // Clear cart after order\n      await storage.clearCart(userId);\n\n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados invÃ¡lidos\", errors: error.errors });\n      }\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Favorites routes\n  app.get('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favorites = await storage.getUserFavorites(userId);\n      res.json(favorites);\n    } catch (error) {\n      console.error(\"Error fetching favorites:\", error);\n      res.status(500).json({ message: \"Failed to fetch favorites\" });\n    }\n  });\n\n  app.post('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favoriteData = insertFavoriteSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const favorite = await storage.addToFavorites(favoriteData);\n      res.json(favorite);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error adding to favorites:\", error);\n      res.status(500).json({ message: \"Failed to add to favorites\" });\n    }\n  });\n\n  app.delete('/api/favorites/:productId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { productId } = req.params;\n      \n      await storage.removeFromFavorites(userId, productId);\n      res.json({ message: \"Removed from favorites\" });\n    } catch (error) {\n      console.error(\"Error removing from favorites:\", error);\n      res.status(500).json({ message: \"Failed to remove from favorites\" });\n    }\n  });\n\n  // CEP lookup route\n  app.get('/api/cep/:cep', async (req, res) => {\n    try {\n      const { cep } = req.params;\n      \n      // Validate CEP format (8 digits)\n      const cleanCep = cep.replace(/\\D/g, '');\n      if (cleanCep.length !== 8) {\n        return res.status(400).json({ \n          error: 'CEP deve conter exatamente 8 dÃ­gitos' \n        });\n      }\n\n      // Call ViaCEP API\n      const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);\n      \n      if (!response.ok) {\n        return res.status(500).json({ \n          error: 'Erro ao consultar CEP' \n        });\n      }\n\n      const data = await response.json();\n      \n      if (data.erro) {\n        return res.status(404).json({ \n          error: 'CEP nÃ£o encontrado' \n        });\n      }\n\n      // Return formatted address data\n      res.json({\n        cep: data.cep,\n        street: data.logradouro,\n        neighborhood: data.bairro,\n        city: data.localidade,\n        state: data.uf,\n        complement: data.complemento || '',\n      });\n    } catch (error) {\n      console.error('Error fetching CEP:', error);\n      res.status(500).json({ \n        error: 'Erro interno do servidor' \n      });\n    }\n  });\n\n  // Coupon routes\n  app.post('/api/coupons/validate', isAuthenticated, async (req: any, res) => {\n    try {\n      const { code } = req.body;\n      \n      const result = await storage.validateCoupon(code);\n      \n      if (result.valid && result.coupon) {\n        res.json({\n          valid: true,\n          discount: result.coupon.discountPercentage,\n          message: `Cupom aplicado! ${result.coupon.discountPercentage}% de desconto`\n        });\n      } else {\n        res.status(400).json({\n          valid: false,\n          error: result.error\n        });\n      }\n    } catch (error) {\n      console.error(\"Error validating coupon:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Address routes\n  app.get('/api/addresses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const addresses = await storage.getUserAddresses(userId);\n      res.json(addresses);\n    } catch (error) {\n      console.error(\"Error fetching addresses:\", error);\n      res.status(500).json({ message: \"Erro ao buscar endereÃ§os\" });\n    }\n  });\n\n  app.post('/api/addresses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Validate input using Zod schema\n      const addressSchema = z.object({\n        name: z.string().min(1, \"Nome Ã© obrigatÃ³rio\"),\n        cep: z.string().regex(/^\\d{8}$|^\\d{5}-?\\d{3}$/, \"CEP invÃ¡lido\"),\n        street: z.string().min(1, \"Rua Ã© obrigatÃ³ria\"),\n        number: z.string().min(1, \"NÃºmero Ã© obrigatÃ³rio\"),\n        complement: z.string().optional(),\n        neighborhood: z.string().min(1, \"Bairro Ã© obrigatÃ³rio\"),\n        city: z.string().min(1, \"Cidade Ã© obrigatÃ³ria\"),\n        state: z.string().min(2, \"Estado Ã© obrigatÃ³rio\").max(2, \"Estado deve ter 2 caracteres\"),\n        isDefault: z.boolean().optional().default(false)\n      });\n\n      const validatedData = addressSchema.parse(req.body);\n      const addressData = {\n        ...validatedData,\n        userId,\n        cep: validatedData.cep.replace(/\\D/g, ''), // Clean CEP\n      };\n\n      const address = await storage.createAddress(addressData);\n      res.json(address);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Dados invÃ¡lidos\",\n          errors: error.errors\n        });\n      }\n      console.error(\"Error creating address:\", error);\n      res.status(500).json({ message: \"Erro ao criar endereÃ§o\" });\n    }\n  });\n\n  app.put('/api/addresses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Validate input using Zod schema (all fields optional for updates)\n      const updateAddressSchema = z.object({\n        name: z.string().min(1, \"Nome Ã© obrigatÃ³rio\").optional(),\n        cep: z.string().regex(/^\\d{8}$|^\\d{5}-?\\d{3}$/, \"CEP invÃ¡lido\").optional(),\n        street: z.string().min(1, \"Rua Ã© obrigatÃ³ria\").optional(),\n        number: z.string().min(1, \"NÃºmero Ã© obrigatÃ³rio\").optional(),\n        complement: z.string().optional(),\n        neighborhood: z.string().min(1, \"Bairro Ã© obrigatÃ³rio\").optional(),\n        city: z.string().min(1, \"Cidade Ã© obrigatÃ³ria\").optional(),\n        state: z.string().min(2, \"Estado Ã© obrigatÃ³rio\").max(2, \"Estado deve ter 2 caracteres\").optional(),\n        isDefault: z.boolean().optional()\n      });\n\n      const validatedData = updateAddressSchema.parse(req.body);\n      \n      // Clean CEP if provided\n      if (validatedData.cep) {\n        validatedData.cep = validatedData.cep.replace(/\\D/g, '');\n      }\n\n      const address = await storage.updateAddress(id, userId, validatedData);\n      res.json(address);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Dados invÃ¡lidos\",\n          errors: error.errors\n        });\n      }\n      if (error instanceof Error && error.message === 'EndereÃ§o nÃ£o encontrado') {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(\"Error updating address:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar endereÃ§o\" });\n    }\n  });\n\n  app.delete('/api/addresses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      await storage.deleteAddress(id, userId);\n      res.json({ message: \"EndereÃ§o removido com sucesso\" });\n    } catch (error) {\n      if (error instanceof Error && error.message === 'EndereÃ§o nÃ£o encontrado') {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(\"Error deleting address:\", error);\n      res.status(500).json({ message: \"Erro ao remover endereÃ§o\" });\n    }\n  });\n\n  app.put('/api/addresses/:id/default', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const address = await storage.setDefaultAddress(id, userId);\n      res.json(address);\n    } catch (error) {\n      if (error instanceof Error && error.message === 'EndereÃ§o nÃ£o encontrado') {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(\"Error setting default address:\", error);\n      res.status(500).json({ message: \"Erro ao definir endereÃ§o padrÃ£o\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.get('/api/admin/orders', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching admin orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin orders\" });\n    }\n  });\n\n  app.put('/api/admin/orders/:id/status', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n      \n      const order = await storage.updateOrderStatus(id, status);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  app.post('/api/admin/products', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const product = await storage.createProduct(req.body);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/admin/products/:id', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.updateProduct(id, req.body);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/admin/products/:id', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Create sample orders for authenticated user (for testing order tracking) - Admin only\n  app.post('/api/seed-orders', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get some products to create sample orders\n      const products = await storage.getProducts();\n      if (products.length === 0) {\n        return res.status(400).json({ message: \"NÃ£o hÃ¡ produtos disponÃ­veis para criar pedidos de exemplo\" });\n      }\n\n      // Ensure we have enough products for sample orders\n      if (products.length < 3) {\n        return res.status(400).json({ message: \"Produtos insuficientes para criar pedidos de exemplo\" });\n      }\n\n      // Pick products safely\n      const availableProducts = products.slice(0, Math.min(6, products.length));\n      \n      // Sample order 1: Ready order (PIX payment, ready for pickup)\n      const order1Items = [\n        { productId: availableProducts[0].id, quantity: 2, price: availableProducts[0].price },\n        { productId: availableProducts[1].id, quantity: 1, price: availableProducts[1].price }\n      ];\n      \n      const order1 = await storage.createOrder({\n        userId,\n        deliveryAddress: \"Rua das Flores, 123 - Centro, JoÃ£o Pessoa - PB, 58000-000\",\n        total: \"25.80\",\n        status: \"ready\",\n        appliedCouponCode: null,\n        discountAmount: \"0.00\"\n      }, order1Items);\n\n      // Sample order 2: Delivered order\n      const order2Items = [\n        { productId: availableProducts[2 % availableProducts.length].id, quantity: 3, price: availableProducts[2 % availableProducts.length].price }\n      ];\n      \n      const order2 = await storage.createOrder({\n        userId,\n        deliveryAddress: \"Av. EpitÃ¡cio Pessoa, 456 - TambaÃº, JoÃ£o Pessoa - PB, 58039-000\", \n        total: \"28.50\",\n        status: \"delivered\",\n        appliedCouponCode: null,\n        discountAmount: \"0.00\"\n      }, order2Items);\n\n      // Sample order 3: Pending order (cash on delivery)\n      const order3Items = [\n        { productId: availableProducts[0].id, quantity: 1, price: availableProducts[0].price }\n      ];\n      \n      const order3 = await storage.createOrder({\n        userId,\n        deliveryAddress: \"Rua JoÃ£o Suassuna, 789 - BancÃ¡rios, JoÃ£o Pessoa - PB, 58051-900\",\n        total: \"16.90\",\n        status: \"pending\", \n        appliedCouponCode: null,\n        discountAmount: \"0.00\"\n      }, order3Items);\n\n      res.json({ \n        message: \"Pedidos de exemplo criados com sucesso\",\n        orders: [order1, order2, order3]\n      });\n      \n    } catch (error) {\n      console.error('Error creating sample orders:', error);\n      res.status(500).json({ message: \"Erro ao criar pedidos de exemplo\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26277},"server/seedData.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertCategory, InsertProduct } from \"@shared/schema\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"ð± Starting database seeding...\");\n\n    // Check if categories already exist\n    const existingCategories = await storage.getCategories();\n    if (existingCategories.length > 0) {\n      console.log(\"ð Categories already exist, skipping seed...\");\n      return;\n    }\n\n    // Create categories with batch processing\n    const categories = [\n      {\n        name: \"ClÃ¡ssicos\",\n        description: \"Sabores tradicionais que conquistaram coraÃ§Ãµes\"\n      },\n      {\n        name: \"Chocolate\",\n        description: \"Para os amantes do chocolate mais intenso\"\n      },\n      {\n        name: \"Frutas\",\n        description: \"Sabores refrescantes com frutas brasileiras\"\n      },\n      {\n        name: \"Especiais\",\n        description: \"CriaÃ§Ãµes Ãºnicas da casa\"\n      },\n      {\n        name: \"Temporada\",\n        description: \"Sabores sazonais por tempo limitado\"\n      }\n    ];\n\n    console.log(\"ð Creating categories...\");\n    const createdCategories = [];\n    \n    // Create categories with proper error handling and small batches\n    for (const category of categories) {\n      try {\n        const created = await storage.createCategory(category as InsertCategory);\n        createdCategories.push(created);\n        console.log(`â Created category: ${created.name}`);\n        \n        // Small delay to prevent connection issues\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        console.error(`â Failed to create category ${category.name}:`, error);\n        throw error;\n      }\n    }\n\n    // Find category IDs\n    const classicosId = createdCategories.find(c => c.name === \"ClÃ¡ssicos\")?.id;\n    const chocolateId = createdCategories.find(c => c.name === \"Chocolate\")?.id;\n    const frutasId = createdCategories.find(c => c.name === \"Frutas\")?.id;\n    const especialId = createdCategories.find(c => c.name === \"Especiais\")?.id;\n    const temporadaId = createdCategories.find(c => c.name === \"Temporada\")?.id;\n\n    // Create products\n    const products = [\n      // ClÃ¡ssicos\n      {\n        name: \"Red Velvet Brasileiro\",\n        description: \"Massa vermelha aveludada com cream cheese artesanal e um toque especial de cacau nacional. Uma receita que combina tradiÃ§Ã£o americana com ingredientes brasileiros.\",\n        price: \"8.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1587668178277-295251f900ce?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: classicosId,\n        ingredients: [\"Farinha de trigo especial\", \"Cacau brasileiro\", \"Cream cheese artesanal\", \"Ovos frescos\", \"AÃ§Ãºcar refinado\", \"Corante natural\"],\n        isAvailable: true,\n        isFeatured: true\n      },\n      {\n        name: \"Baunilha ClÃ¡ssica\",\n        description: \"O tradicional cupcake de baunilha com cobertura cremosa. Simplicidade e perfeiÃ§Ã£o em cada mordida.\",\n        price: \"6.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1614707267537-b85aaf00c4b7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: classicosId,\n        ingredients: [\"Farinha de trigo\", \"EssÃªncia de baunilha\", \"Ovos\", \"AÃ§Ãºcar\", \"Manteiga\", \"Leite\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n\n      // Chocolate\n      {\n        name: \"Brigadeiro Gourmet\",\n        description: \"Cupcake de chocolate com cobertura de brigadeiro tradicional e granulado belga. O sabor da infÃ¢ncia brasileiro em formato sofisticado.\",\n        price: \"9.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1576618148400-f54bed99fcfd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: chocolateId,\n        ingredients: [\"Massa de chocolate\", \"Leite condensado\", \"Cacau em pÃ³\", \"Manteiga\", \"Granulado belga\"],\n        isAvailable: true,\n        isFeatured: true\n      },\n      {\n        name: \"Nutella Dream\",\n        description: \"Massa de chocolate recheada com Nutella e cobertura de cream cheese com avelÃ£s tostadas. Uma explosÃ£o de sabor irresistÃ­vel.\",\n        price: \"11.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1599599810769-bcde5a160d32?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: chocolateId,\n        ingredients: [\"Chocolate belga\", \"Nutella\", \"AvelÃ£s tostadas\", \"Cream cheese\", \"Cacau em pÃ³\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n      {\n        name: \"Chocolate Duplo\",\n        description: \"Para os verdadeiros amantes do chocolate. Massa de chocolate com chips de chocolate e cobertura de ganache.\",\n        price: \"10.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: chocolateId,\n        ingredients: [\"Chocolate 70% cacau\", \"Chips de chocolate\", \"Ganache\", \"Manteiga\", \"AÃ§Ãºcar mascavo\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n\n      // Frutas\n      {\n        name: \"LimÃ£o Siciliano\",\n        description: \"Massa leve com raspas de limÃ£o siciliano e cobertura de cream cheese cÃ­trica. Refrescante e equilibrado, perfeito para os dias quentes.\",\n        price: \"7.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: frutasId,\n        ingredients: [\"LimÃ£o siciliano\", \"Farinha de trigo\", \"Cream cheese\", \"AÃ§Ãºcar\", \"Raspas de limÃ£o\"],\n        isAvailable: true,\n        isFeatured: true\n      },\n      {\n        name: \"Morango Premium\",\n        description: \"Cupcake com pedaÃ§os de morango fresco e cobertura rosada com morangos desidratados. Feito com morangos selecionados.\",\n        price: \"10.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1614707267537-b85aaf00c4b7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: frutasId,\n        ingredients: [\"Morangos frescos\", \"Morangos desidratados\", \"Farinha de trigo\", \"AÃ§Ãºcar\", \"Corante natural\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n      {\n        name: \"Coco Tropical\",\n        description: \"Sabor do Brasil com massa de coco fresco e cobertura de beijinho. Decorado com coco ralado tostado.\",\n        price: \"8.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1607478900766-efe13248b125?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: frutasId,\n        ingredients: [\"Coco fresco\", \"Leite de coco\", \"Coco ralado\", \"Leite condensado\", \"AÃ§Ãºcar cristal\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n      {\n        name: \"MaracujÃ¡ Brasileiro\",\n        description: \"Massa suave com polpa de maracujÃ¡ natural e cobertura azedinha. O sabor tropical que representa o Brasil.\",\n        price: \"9.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: frutasId,\n        ingredients: [\"Polpa de maracujÃ¡\", \"AÃ§Ãºcar\", \"Farinha de trigo\", \"Ovos\", \"Cream cheese\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n\n      // Especiais\n      {\n        name: \"Doce de Leite Artesanal\",\n        description: \"Cupcake com doce de leite caseiro no recheio e na cobertura. Uma especialidade da casa que derrete na boca.\",\n        price: \"12.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: especialId,\n        ingredients: [\"Doce de leite artesanal\", \"Leite condensado\", \"AÃ§Ãºcar queimado\", \"Farinha especial\", \"Flor de sal\"],\n        isAvailable: true,\n        isFeatured: true\n      },\n      {\n        name: \"Churros Cupcake\",\n        description: \"InovaÃ§Ã£o da casa: massa com canela e aÃ§Ãºcar, recheio de doce de leite e cobertura que imita a textura do churros.\",\n        price: \"13.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1599599810769-bcde5a160d32?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: especialId,\n        ingredients: [\"Canela do CeilÃ£o\", \"AÃ§Ãºcar cristal\", \"Doce de leite\", \"Farinha de trigo\", \"Essence de baunilha\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n      {\n        name: \"CafÃ© Brasileiro\",\n        description: \"Massa com cafÃ© expresso brasileiro e cobertura de buttercream com grÃ£os de cafÃ©. Para os amantes do cafÃ©.\",\n        price: \"10.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1576618148400-f54bed99fcfd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: especialId,\n        ingredients: [\"CafÃ© expresso\", \"GrÃ£os de cafÃ©\", \"Buttercream\", \"AÃ§Ãºcar mascavo\", \"EssÃªncia de cafÃ©\"],\n        isAvailable: true,\n        isFeatured: false\n      },\n\n      // Temporada\n      {\n        name: \"Panetone Natalino\",\n        description: \"EdiÃ§Ã£o especial de Natal com massa de panetone, frutas cristalizadas e cobertura nevada. DisponÃ­vel apenas em dezembro.\",\n        price: \"15.90\",\n        imageUrl: \"https://images.unsplash.com/photo-1607478900766-efe13248b125?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: temporadaId,\n        ingredients: [\"Frutas cristalizadas\", \"Farinha especial\", \"Fermento natural\", \"AÃ§Ãºcar\", \"Cobertura nevada\"],\n        isAvailable: false,\n        isFeatured: false\n      },\n      {\n        name: \"AÃ§aÃ­ Gourmet\",\n        description: \"Cupcake com aÃ§aÃ­ natural, granola crocante e cobertura de cream cheese roxo. Sabor do verÃ£o brasileiro.\",\n        price: \"11.50\",\n        imageUrl: \"https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n        categoryId: temporadaId,\n        ingredients: [\"AÃ§aÃ­ natural\", \"Granola artesanal\", \"Cream cheese\", \"Corante natural\", \"Mel\"],\n        isAvailable: true,\n        isFeatured: false\n      }\n    ];\n\n    console.log(\"ð° Creating products...\");\n    \n    // Create products in smaller batches with error handling\n    const batchSize = 3;\n    for (let i = 0; i < products.length; i += batchSize) {\n      const batch = products.slice(i, i + batchSize);\n      \n      for (const product of batch) {\n        try {\n          const created = await storage.createProduct(product as InsertProduct);\n          console.log(`â Created product: ${created.name} - R$ ${created.price}`);\n          \n          // Small delay to prevent connection overload\n          await new Promise(resolve => setTimeout(resolve, 200));\n        } catch (error) {\n          console.error(`â Error creating product ${product.name}:`, error);\n        }\n      }\n      \n      // Longer pause between batches\n      if (i + batchSize < products.length) {\n        console.log(`ð¦ Processed batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(products.length / batchSize)}`);\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n    }\n\n    console.log(\"ð Database seeded successfully!\");\n    \n  } catch (error) {\n    console.error(\"â Error seeding database:\", error);\n    // Don't throw the error so the server can still start\n    console.log(\"â ï¸ Server will continue to run despite seeding error\");\n  }\n}\n","size_bytes":11975},"server/storage.ts":{"content":"import {\n  users,\n  products,\n  categories,\n  cartItems,\n  orders,\n  orderItems,\n  favorites,\n  coupons,\n  addresses,\n  type User,\n  type UpsertUser,\n  type Product,\n  type Category,\n  type CartItem,\n  type Order,\n  type OrderItem,\n  type Favorite,\n  type Coupon,\n  type Address,\n  type InsertProduct,\n  type InsertCategory,\n  type InsertCartItem,\n  type InsertOrder,\n  type InsertOrderItem,\n  type CreateOrderItem,\n  type InsertFavorite,\n  type InsertCoupon,\n  type InsertAddress,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, inArray, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Product operations\n  getProducts(): Promise<Product[]>;\n  getProductsByCategory(categoryId: string): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsByIds(ids: string[]): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number, userId: string): Promise<CartItem | null>;\n  removeFromCart(id: string, userId: string): Promise<boolean>;\n  clearCart(userId: string): Promise<void>;\n  \n  // Order operations\n  createOrder(order: InsertOrder, items: CreateOrderItem[]): Promise<Order>;\n  createOrderWithCoupon(userId: string, deliveryAddress: string, items: CreateOrderItem[], couponCode: string, status?: string): Promise<{ order: Order; appliedCoupon: Coupon; totals: { subtotal: string; discount: string; total: string } }>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrderWithItems(userId: string, orderId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined>;\n  cancelOrder(userId: string, orderId: string): Promise<Order>;\n  \n  // Favorites operations\n  getUserFavorites(userId: string): Promise<(Favorite & { product: Product })[]>;\n  addToFavorites(favorite: InsertFavorite): Promise<Favorite>;\n  removeFromFavorites(userId: string, productId: string): Promise<void>;\n  \n  // Coupon operations\n  getCoupon(code: string): Promise<Coupon | undefined>;\n  validateCoupon(code: string): Promise<{ valid: boolean; coupon?: Coupon; error?: string }>;\n  incrementCouponUsage(id: string): Promise<void>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  \n  // Address operations\n  getUserAddresses(userId: string): Promise<Address[]>;\n  createAddress(address: InsertAddress): Promise<Address>;\n  updateAddress(addressId: string, userId: string, updates: Partial<InsertAddress>): Promise<Address>;\n  deleteAddress(addressId: string, userId: string): Promise<void>;\n  setDefaultAddress(addressId: string, userId: string): Promise<Address>;\n  \n  // Admin operations\n  getAdminStats(): Promise<{\n    totalOrders: number;\n    totalRevenue: number;\n    totalProducts: number;\n    totalUsers: number;\n  }>;\n  getAllOrders(): Promise<(Order & { user: User; orderItems: (OrderItem & { product: Product })[] })[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n  updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isAvailable, true));\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.categoryId, categoryId), eq(products.isAvailable, true)));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.isFeatured, true), eq(products.isAvailable, true)))\n      .limit(6);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async getProductsByIds(ids: string[]): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(inArray(products.id, ids));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    return await db\n      .select({\n        id: cartItems.id,\n        userId: cartItems.userId,\n        productId: cartItems.productId,\n        quantity: cartItems.quantity,\n        createdAt: cartItems.createdAt,\n        product: products,\n      })\n      .from(cartItems)\n      .innerJoin(products, eq(cartItems.productId, products.id))\n      .where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const [existingItem] = await db\n      .select()\n      .from(cartItems)\n      .where(\n        and(\n          eq(cartItems.userId, cartItem.userId),\n          eq(cartItems.productId, cartItem.productId)\n        )\n      );\n\n    if (existingItem) {\n      // Update quantity if item exists\n      const [updatedItem] = await db\n        .update(cartItems)\n        .set({ quantity: existingItem.quantity + (cartItem.quantity || 1) })\n        .where(eq(cartItems.id, existingItem.id))\n        .returning();\n      return updatedItem;\n    } else {\n      // Create new cart item\n      const [newItem] = await db.insert(cartItems).values(cartItem).returning();\n      return newItem;\n    }\n  }\n\n  async updateCartItem(id: string, quantity: number, userId: string): Promise<CartItem | null> {\n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(and(eq(cartItems.id, id), eq(cartItems.userId, userId)))\n      .returning();\n    return updatedItem || null;\n  }\n\n  async removeFromCart(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(cartItems)\n      .where(and(eq(cartItems.id, id), eq(cartItems.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrder, items: CreateOrderItem[]): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    \n    await db.insert(orderItems).values(\n      items.map(item => ({ ...item, orderId: newOrder.id }))\n    );\n\n    return newOrder;\n  }\n\n  async createOrderWithCoupon(userId: string, deliveryAddress: string, items: CreateOrderItem[], couponCode: string, status: string = \"pending\"): Promise<{ order: Order; appliedCoupon: Coupon; totals: { subtotal: string; discount: string; total: string } }> {\n    return await db.transaction(async (tx) => {\n      // Lock and validate coupon within transaction\n      const normalized = couponCode.trim().toUpperCase();\n      const [coupon] = await tx.select().from(coupons)\n        .where(eq(coupons.code, normalized))\n        .for('update'); // Row-level lock\n      \n      if (!coupon || !coupon.isActive) {\n        throw new Error('Cupom nÃ£o encontrado ou inativo');\n      }\n\n      if (coupon.expiresAt && new Date() > coupon.expiresAt) {\n        throw new Error('Cupom expirado');\n      }\n\n      if (coupon.maxUsage && (coupon.currentUsage || 0) >= coupon.maxUsage) {\n        throw new Error('Cupom esgotado');\n      }\n\n      // Compute totals within transaction using locked coupon data\n      let subtotalCents = 0;\n      items.forEach(item => {\n        const priceCents = Math.round(parseFloat(item.price) * 100);\n        subtotalCents += priceCents * item.quantity;\n      });\n\n      const discountAmountCents = Math.round(subtotalCents * (coupon.discountPercentage / 100));\n      const subtotalAfterDiscountCents = Math.max(0, subtotalCents - discountAmountCents);\n      \n      // Add delivery fee (R$ 5.00 = 500 cents)\n      const deliveryFeeCents = subtotalCents > 0 ? 500 : 0;\n      const finalTotalCents = subtotalAfterDiscountCents + deliveryFeeCents;\n      \n      // Convert to decimal strings\n      const subtotal = (subtotalCents / 100).toFixed(2);\n      const discountAmount = (discountAmountCents / 100).toFixed(2);\n      const finalTotal = (finalTotalCents / 100).toFixed(2);\n\n      // Create order within transaction\n      const [newOrder] = await tx.insert(orders).values({\n        userId,\n        deliveryAddress,\n        total: finalTotal,\n        status: status,\n        appliedCouponCode: coupon.code,\n        discountAmount,\n      }).returning();\n      \n      await tx.insert(orderItems).values(\n        items.map(item => ({ ...item, orderId: newOrder.id }))\n      );\n\n      // Increment usage atomically\n      await tx.update(coupons)\n        .set({ currentUsage: sql`current_usage + 1` })\n        .where(eq(coupons.id, coupon.id));\n\n      return { \n        order: newOrder, \n        appliedCoupon: coupon,\n        totals: { subtotal, discount: discountAmount, total: finalTotal }\n      };\n    });\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async getOrderWithItems(userId: string, orderId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined> {\n    // First get the order and verify ownership\n    const order = await this.getOrder(orderId);\n    if (!order || order.userId !== userId) {\n      return undefined;\n    }\n\n    // Get order items with product details\n    const orderItemsWithProducts = await db\n      .select({\n        id: orderItems.id,\n        orderId: orderItems.orderId,\n        productId: orderItems.productId,\n        quantity: orderItems.quantity,\n        price: orderItems.price,\n        product: products,\n      })\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, orderId));\n\n    // Return order with items array\n    return {\n      ...order,\n      orderItems: orderItemsWithProducts\n    };\n  }\n\n  async cancelOrder(userId: string, orderId: string): Promise<Order> {\n    const [order] = await db.select().from(orders)\n      .where(and(eq(orders.id, orderId), eq(orders.userId, userId)));\n    \n    if (!order) {\n      throw new Error('Pedido nÃ£o encontrado');\n    }\n\n    // Only allow canceling orders in pending or confirmed status\n    if (order.status !== 'pending' && order.status !== 'confirmed') {\n      throw new Error('Este pedido nÃ£o pode ser cancelado');\n    }\n\n    const [updatedOrder] = await db.update(orders)\n      .set({ status: 'cancelled' })\n      .where(eq(orders.id, orderId))\n      .returning();\n\n    return updatedOrder;\n  }\n\n  // Favorites operations\n  async getUserFavorites(userId: string): Promise<(Favorite & { product: Product })[]> {\n    return await db\n      .select({\n        id: favorites.id,\n        userId: favorites.userId,\n        productId: favorites.productId,\n        createdAt: favorites.createdAt,\n        product: products,\n      })\n      .from(favorites)\n      .innerJoin(products, eq(favorites.productId, products.id))\n      .where(eq(favorites.userId, userId));\n  }\n\n  async addToFavorites(favorite: InsertFavorite): Promise<Favorite> {\n    const [newFavorite] = await db.insert(favorites).values(favorite).returning();\n    return newFavorite;\n  }\n\n  async removeFromFavorites(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.productId, productId)));\n  }\n\n  // Admin operations\n  async getAdminStats(): Promise<{\n    totalOrders: number;\n    totalRevenue: number;\n    totalProducts: number;\n    totalUsers: number;\n  }> {\n    const [ordersCount] = await db.select({ count: sql<number>`count(*)` }).from(orders);\n    const [revenue] = await db.select({ sum: sql<number>`sum(total)` }).from(orders);\n    const [productsCount] = await db.select({ count: sql<number>`count(*)` }).from(products);\n    const [usersCount] = await db.select({ count: sql<number>`count(*)` }).from(users);\n    \n    return {\n      totalOrders: ordersCount.count || 0,\n      totalRevenue: Number(revenue.sum) || 0,\n      totalProducts: productsCount.count || 0,\n      totalUsers: usersCount.count || 0,\n    };\n  }\n\n  async getAllOrders(): Promise<(Order & { user: User; orderItems: (OrderItem & { product: Product })[] })[]> {\n    return await db\n      .select({\n        id: orders.id,\n        userId: orders.userId,\n        status: orders.status,\n        total: orders.total,\n        deliveryAddress: orders.deliveryAddress,\n        appliedCouponCode: orders.appliedCouponCode,\n        discountAmount: orders.discountAmount,\n        createdAt: orders.createdAt,\n        user: users,\n        orderItems: orderItems,\n        product: products,\n      })\n      .from(orders)\n      .innerJoin(users, eq(orders.userId, users.id))\n      .leftJoin(orderItems, eq(orders.id, orderItems.orderId))\n      .leftJoin(products, eq(orderItems.productId, products.id))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(updates)\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Coupon operations\n  async getCoupon(code: string): Promise<Coupon | undefined> {\n    const normalized = code.trim().toUpperCase();\n    const [coupon] = await db.select().from(coupons).where(eq(coupons.code, normalized));\n    return coupon;\n  }\n\n  async validateCoupon(code: string): Promise<{ valid: boolean; coupon?: Coupon; error?: string }> {\n    if (!code || code.trim() === '') {\n      return { valid: false, error: 'CÃ³digo do cupom Ã© obrigatÃ³rio' };\n    }\n\n    const coupon = await this.getCoupon(code);\n    \n    if (!coupon) {\n      return { valid: false, error: 'Cupom nÃ£o encontrado' };\n    }\n\n    if (!coupon.isActive) {\n      return { valid: false, error: 'Cupom inativo' };\n    }\n\n    if (coupon.expiresAt && new Date() > coupon.expiresAt) {\n      return { valid: false, error: 'Cupom expirado' };\n    }\n\n    if (coupon.maxUsage && (coupon.currentUsage || 0) >= coupon.maxUsage) {\n      return { valid: false, error: 'Cupom esgotado' };\n    }\n\n    return { valid: true, coupon };\n  }\n\n  async incrementCouponUsage(id: string): Promise<void> {\n    await db\n      .update(coupons)\n      .set({ currentUsage: sql`current_usage + 1` })\n      .where(eq(coupons.id, id));\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const [newCoupon] = await db.insert(coupons).values({\n      ...coupon,\n      code: coupon.code.trim().toUpperCase()\n    }).returning();\n    return newCoupon;\n  }\n\n  // Address operations\n  async getUserAddresses(userId: string): Promise<Address[]> {\n    return await db\n      .select()\n      .from(addresses)\n      .where(eq(addresses.userId, userId))\n      .orderBy(desc(addresses.isDefault), desc(addresses.createdAt));\n  }\n\n  async createAddress(address: InsertAddress): Promise<Address> {\n    return await db.transaction(async (tx) => {\n      // Create the address first\n      const [newAddress] = await tx.insert(addresses).values(address).returning();\n\n      // If this should be default, atomically set it as the only default\n      if (address.isDefault) {\n        await tx\n          .update(addresses)\n          .set({ \n            isDefault: sql`${addresses.id} = ${newAddress.id}`,\n            updatedAt: new Date()\n          })\n          .where(eq(addresses.userId, address.userId));\n      }\n\n      return newAddress;\n    });\n  }\n\n  async updateAddress(addressId: string, userId: string, updates: Partial<InsertAddress>): Promise<Address> {\n    return await db.transaction(async (tx) => {\n      // Verify ownership\n      const [existingAddress] = await tx\n        .select()\n        .from(addresses)\n        .where(and(eq(addresses.id, addressId), eq(addresses.userId, userId)));\n\n      if (!existingAddress) {\n        throw new Error('EndereÃ§o nÃ£o encontrado');\n      }\n\n      // Whitelist allowed update fields (exclude userId and system fields)\n      const { name, cep, street, number, complement, neighborhood, city, state, isDefault } = updates;\n      const allowedUpdates = {\n        ...(name !== undefined && { name }),\n        ...(cep !== undefined && { cep }),\n        ...(street !== undefined && { street }),\n        ...(number !== undefined && { number }),\n        ...(complement !== undefined && { complement }),\n        ...(neighborhood !== undefined && { neighborhood }),\n        ...(city !== undefined && { city }),\n        ...(state !== undefined && { state }),\n        ...(isDefault !== undefined && { isDefault }),\n        updatedAt: new Date()\n      };\n\n      // Handle default address logic atomically\n      if (isDefault) {\n        // Atomically set only this address as default for the user\n        await tx\n          .update(addresses)\n          .set({ \n            isDefault: sql`${addresses.id} = ${addressId}`,\n            updatedAt: new Date()\n          })\n          .where(eq(addresses.userId, userId));\n      }\n\n      // Update other fields (excluding isDefault since it was handled above)\n      const { isDefault: _, ...otherUpdates } = allowedUpdates;\n      const [updatedAddress] = await tx\n        .update(addresses)\n        .set(otherUpdates)\n        .where(eq(addresses.id, addressId))\n        .returning();\n\n      return updatedAddress;\n    });\n  }\n\n  async deleteAddress(addressId: string, userId: string): Promise<void> {\n    const result = await db\n      .delete(addresses)\n      .where(and(eq(addresses.id, addressId), eq(addresses.userId, userId)))\n      .returning();\n\n    if (result.length === 0) {\n      throw new Error('EndereÃ§o nÃ£o encontrado');\n    }\n  }\n\n  async setDefaultAddress(addressId: string, userId: string): Promise<Address> {\n    return await db.transaction(async (tx) => {\n      // Verify ownership\n      const [existingAddress] = await tx\n        .select()\n        .from(addresses)\n        .where(and(eq(addresses.id, addressId), eq(addresses.userId, userId)));\n\n      if (!existingAddress) {\n        throw new Error('EndereÃ§o nÃ£o encontrado');\n      }\n\n      // Atomically set only this address as default for the user\n      await tx\n        .update(addresses)\n        .set({ \n          isDefault: sql`${addresses.id} = ${addressId}`,\n          updatedAt: new Date()\n        })\n        .where(eq(addresses.userId, userId));\n\n      // Return the updated address\n      const [updatedAddress] = await tx\n        .select()\n        .from(addresses)\n        .where(eq(addresses.id, addressId));\n\n      return updatedAddress;\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20751},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: varchar(\"image_url\").notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  ingredients: text(\"ingredients\").array(),\n  isAvailable: boolean(\"is_available\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  status: varchar(\"status\").notNull().default(\"pending\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  appliedCouponCode: varchar(\"applied_coupon_code\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(),\n  discountPercentage: integer(\"discount_percentage\").notNull(),\n  maxUsage: integer(\"max_usage\"), // null = unlimited\n  currentUsage: integer(\"current_usage\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  expiresAt: timestamp(\"expires_at\"), // null = no expiry\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const addresses = pgTable(\"addresses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(), // e.g., \"Casa\", \"Trabalho\", \"Casa da MÃ£e\"\n  cep: varchar(\"cep\").notNull(),\n  street: varchar(\"street\").notNull(),\n  number: varchar(\"number\").notNull(),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\").notNull(),\n  city: varchar(\"city\").notNull(),\n  state: varchar(\"state\").notNull(),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  orders: many(orders),\n  favorites: many(favorites),\n  addresses: many(addresses),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  cartItems: many(cartItems),\n  orderItems: many(orderItems),\n  favorites: many(favorites),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  user: one(users, {\n    fields: [favorites.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [favorites.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const addressesRelations = relations(addresses, ({ one }) => ({\n  user: one(users, {\n    fields: [addresses.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas  \nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Alternative upsert schema that omits id for normal inserts\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\n// Schema for creating order items without orderId (used during order creation)\nexport const createOrderItemSchema = insertOrderItemSchema.omit({\n  orderId: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type Address = typeof addresses.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type CreateOrderItem = z.infer<typeof createOrderItemSchema>;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type InsertAddress = z.infer<typeof insertAddressSchema>;\n","size_bytes":9016},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { DeliveryProvider } from \"@/contexts/DeliveryContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport Layout from \"@/components/Layout\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Catalog from \"@/pages/Catalog\";\nimport ProductDetail from \"@/pages/ProductDetail\";\nimport Cart from \"@/pages/Cart\";\nimport Profile from \"@/pages/Profile\";\nimport Orders from \"@/pages/Orders\";\nimport OrderTracking from \"@/pages/OrderTracking\";\nimport Admin from \"@/pages/Admin\";\nimport About from \"@/pages/About\";\nimport NotFound from \"@/pages/not-found\";\n\n// Component to handle scroll to top on route change\nfunction ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Smooth scroll to top when route changes\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth'\n    });\n  }, [location]);\n\n  return null;\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Layout>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" component={isLoading || !isAuthenticated ? Landing : Home} />\n        <Route path=\"/catalog\" component={Catalog} />\n        <Route path=\"/product/:id\" component={ProductDetail} />\n        <Route path=\"/cart\" component={Cart} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/orders\" component={Orders} />\n        <Route path=\"/order/:id\" component={OrderTracking} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <DeliveryProvider>\n          <CartProvider>\n            <Toaster />\n            <Router />\n          </CartProvider>\n        </DeliveryProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2312},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Architects+Daughter:wght@400&family=Source+Code+Pro:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(315deg 84.21% 92.55%);\n  --foreground: hsl(12deg 100% 27.45%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(12deg 100% 27.45%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(12deg 100% 27.45%);\n  --primary: hsl(312.23deg 83.74% 75.88%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(312.23deg 83.74% 75.88%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(0deg 0.4% 48.82%);\n  --accent: hsl(0deg 0% 100%);\n  --accent-foreground: hsl(312.23deg 83.74% 75.88%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(312.23deg 83.74% 75.88%);\n  --chart-1: hsl(12deg 100% 27.45%);\n  --chart-2: hsl(312.23deg 83.74% 75.88%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Source Code Pro;\n  --font-serif: Architects Daughter;\n  --font-mono: Architects Daughter;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --spacing: 0.25rem;\n  --tracking-normal: 0em;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n","size_bytes":5513},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Layout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart, User, Menu, Package, Settings, LogOut } from \"lucide-react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { isAuthenticated, user } = useAuth();\n  const { itemCount } = useCart();\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"InÃ­cio\", href: \"/\" },\n    { name: \"CatÃ¡logo\", href: \"/catalog\" },\n    { name: \"Sobre NÃ³s\", href: \"/about\" },\n    ...((user as any)?.isAdmin ? [{ name: \"Admin\", href: \"/admin\" }] : []),\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-background backdrop-blur-sm border-b border-border sticky top-0 z-50\">\n        <div className=\"container mx-auto px-2 sm:px-4 py-3 sm:py-4\">\n          <div className=\"flex items-center justify-between\">\n            {/* Left section - Logo */}\n            <div className=\"flex justify-start\">\n              <Link href=\"/\" className=\"flex items-center space-x-1 sm:space-x-2 cursor-pointer\" data-testid=\"link-home\">\n                <div className=\"text-2xl sm:text-3xl lg:text-4xl transform hover:scale-110 transition-transform duration-200\">ð§</div>\n                <h1 className=\"text-xl sm:text-xl lg:text-2xl font-serif font-bold text-primary whitespace-nowrap\">Doce DelÃ­cia</h1>\n              </Link>\n            </div>\n            \n            {/* Center section - Navigation */}\n            <nav className=\"hidden md:flex items-center justify-center space-x-6 absolute left-1/2 transform -translate-x-1/2\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`transition-colors font-medium flex items-center space-x-1 ${\n                    location === item.href ? \"text-primary\" : \"text-foreground hover:text-primary\"\n                  }`}\n                  data-testid={`link-${item.name.toLowerCase()}`}\n                >\n                  <span>{item.name}</span>\n                </Link>\n              ))}\n            </nav>\n\n            {/* Right section - Auth/Profile buttons */}\n            <div className=\"flex items-center space-x-2\">\n              {/* Mobile menu */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden h-9 w-9\" data-testid=\"button-menu\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                  <nav className=\"flex flex-col space-y-4 mt-8\">\n                    {navigation.map((item) => (\n                      <Link\n                        key={item.name}\n                        href={item.href}\n                        className=\"flex items-center justify-between p-3 rounded-lg hover:bg-accent transition-colors\"\n                        data-testid={`link-mobile-${item.name.toLowerCase()}`}\n                      >\n                        <span className=\"font-medium\">{item.name}</span>\n                      </Link>\n                    ))}\n                    {!isAuthenticated && (\n                      <div className=\"border-t pt-4 space-y-3\">\n                        <a\n                          href=\"/api/login\"\n                          className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 hover:scale-105 active:scale-95 transition-all duration-200 font-medium block text-center\"\n                          data-testid=\"button-mobile-login\"\n                        >\n                          Entrar\n                        </a>\n                        <a\n                          href=\"/api/login\"\n                          className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 hover:scale-105 active:scale-95 transition-all duration-200 font-medium block text-center\"\n                          data-testid=\"button-mobile-register\"\n                        >\n                          Criar Conta\n                        </a>\n                      </div>\n                    )}\n                  </nav>\n                </SheetContent>\n              </Sheet>\n\n              {isAuthenticated ? (\n                <>\n                  {/* Profile Icon - First on mobile, last on desktop */}\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button \n                        size=\"icon\" \n                        className=\"bg-primary text-primary-foreground hover:bg-primary/90 h-9 w-9 order-1 sm:order-2\"\n                        data-testid=\"button-profile-menu\"\n                      >\n                        <User className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\" className=\"w-56\">\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/profile\" className=\"flex items-center w-full\" data-testid=\"menu-profile\">\n                          <Settings className=\"mr-2 h-4 w-4\" />\n                          Meu Perfil\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/orders\" className=\"flex items-center w-full\" data-testid=\"menu-orders\">\n                          <Package className=\"mr-2 h-4 w-4\" />\n                          Meus Pedidos\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem asChild>\n                        <a href=\"/api/logout\" className=\"flex items-center w-full\" data-testid=\"menu-logout\">\n                          <LogOut className=\"mr-2 h-4 w-4\" />\n                          Sair\n                        </a>\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                  \n                  {/* Cart Icon - Last on mobile, first on desktop */}\n                  <Link href=\"/cart\" data-testid=\"link-cart\">\n                    <Button \n                      size=\"icon\" \n                      className=\"relative bg-primary text-primary-foreground hover:bg-primary/90 h-9 w-9 order-2 sm:order-1\"\n                    >\n                      <ShoppingCart className=\"h-4 w-4\" />\n                      {itemCount > 0 && (\n                        <span className=\"absolute -top-2 -right-2 bg-background text-foreground rounded-full px-1.5 py-0.5 text-xs min-w-[18px] text-center font-semibold shadow-lg border\" data-testid=\"text-cart-count\">\n                          {itemCount}\n                        </span>\n                      )}\n                    </Button>\n                  </Link>\n                </>\n              ) : (\n                <div className=\"hidden sm:flex items-center space-x-2\">\n                  <Button asChild size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 h-9\">\n                    <a href=\"/api/login\" data-testid=\"button-login\">\n                      Entrar\n                    </a>\n                  </Button>\n                  <Button asChild size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 h-9\">\n                    <a href=\"/api/login\" data-testid=\"button-register\">\n                      <span className=\"hidden lg:inline\">Criar Conta</span>\n                      <span className=\"lg:hidden\">Cadastro</span>\n                    </a>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <main className=\"flex-1\">\n        {children}\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12 mt-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 items-start\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"text-5xl\">ð§</div>\n                <h3 className=\"text-2xl font-serif font-bold text-primary\">Doce DelÃ­cia</h3>\n              </div>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Criando momentos especiais atravÃ©s de cupcakes Ãºnicos hÃ¡ mais de 10 anos. \n                Sabores brasileiros com qualidade internacional.\n              </p>\n              <div className=\"flex space-x-4\">\n                <div className=\"bg-primary text-primary-foreground w-10 h-10 rounded-lg flex items-center justify-center hover:bg-primary/90 hover:scale-105 active:scale-95 transition-all duration-200 cursor-pointer\">\n                  ð\n                </div>\n                <div className=\"bg-primary text-primary-foreground w-10 h-10 rounded-lg flex items-center justify-center hover:bg-primary/90 hover:scale-105 active:scale-95 transition-all duration-200 cursor-pointer\">\n                  ð·\n                </div>\n                <div className=\"bg-primary text-primary-foreground w-10 h-10 rounded-lg flex items-center justify-center hover:bg-primary/90 hover:scale-105 active:scale-95 transition-all duration-200 cursor-pointer\">\n                  ð¦\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <div className=\"text-right\">\n                <h4 className=\"font-serif font-bold text-foreground mb-4\">Contato</h4>\n                <div className=\"space-y-2 text-muted-foreground text-sm\">\n                  <p>ð Rua das Flores, 123<br />Vila Madalena - SÃ£o Paulo, SP</p>\n                  <p>ð (11) 99999-9999</p>\n                  <p>âï¸ contato@docedelicia.com.br</p>\n                  <p>ð Seg-Dom: 8h Ã s 20h</p>\n                </div>\n              </div>\n            </div>\n\n          </div>\n\n          <div className=\"border-t border-border pt-8 mt-8 text-center text-muted-foreground\">\n            <p>&copy; 2024 Doce DelÃ­cia. Todos os direitos reservados. Feito com â¤ï¸ no Brasil.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10763},"client/src/components/ProductCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Plus } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product, Favorite } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  featured?: boolean;\n}\n\nexport default function ProductCard({ product, featured = false }: ProductCardProps) {\n  const { addToCart } = useCart();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's favorites\n  const { data: favorites } = useQuery({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  // Check if this product is favorited\n  const isFavorite = favorites && Array.isArray(favorites) \n    ? favorites.some((fav: any) => fav.productId === product.id)\n    : false;\n\n  // Favorites mutation\n  const favoriteMutation = useMutation({\n    mutationFn: async () => {\n      if (isFavorite) {\n        await apiRequest(\"DELETE\", `/api/favorites/${product.id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { productId: product.id });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\"] });\n      toast({\n        title: isFavorite ? \"Removido dos favoritos\" : \"Adicionado aos favoritos\",\n        description: isFavorite \n          ? \"Produto removido da sua lista de favoritos\" \n          : \"Produto adicionado Ã  sua lista de favoritos\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel atualizar os favoritos\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    addToCart(product.id);\n  };\n\n  const handleToggleFavorite = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para gerenciar seus favoritos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    favoriteMutation.mutate();\n  };\n\n  return (\n    <Link href={`/product/${product.id}`} className=\"block\" data-testid={`card-product-${product.id}`}>\n      <div className={`bg-card rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 group cursor-pointer ${\n        featured ? \"lg:col-span-1\" : \"\"\n      }`}>\n        <div className=\"relative\">\n          <img \n            src={product.imageUrl} \n            alt={product.name}\n            className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n            data-testid={`img-product-${product.id}`}\n          />\n          <button \n            className=\"absolute top-3 right-3 bg-white/80 backdrop-blur-sm p-2 rounded-full hover:bg-white transition-colors\"\n            onClick={handleToggleFavorite}\n            disabled={favoriteMutation.isPending}\n            data-testid={`button-favorite-${product.id}`}\n          >\n            <Heart className={`h-4 w-4 transition-colors ${\n              isFavorite \n                ? \"text-red-500 fill-red-500\" \n                : \"text-muted-foreground hover:text-red-500\"\n            }`} />\n          </button>\n        </div>\n        \n        <div className=\"p-4\">\n          <h3 className=\"font-serif font-bold text-foreground mb-2\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-product-description-${product.id}`}>\n            {product.description}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-lg font-bold text-primary\" data-testid={`text-product-price-${product.id}`}>\n              R$ {parseFloat(product.price).toFixed(2).replace('.', ',')}\n            </span>\n            \n            <div className=\"flex items-center space-x-2\">\n              \n              <Button \n                size=\"sm\" \n                onClick={handleAddToCart}\n                className=\"bg-primary hover:bg-primary/90\"\n                data-testid={`button-add-cart-${product.id}`}\n              >\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Adicionar\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":4714},"client/src/contexts/CartContext.tsx":{"content":"import { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\ninterface CartState {\n  items: (CartItem & { product: Product })[];\n  itemCount: number;\n  total: number;\n}\n\ninterface CartContextType extends CartState {\n  addToCart: (productId: string, quantity?: number) => void;\n  updateQuantity: (itemId: string, quantity: number) => void;\n  removeFromCart: (itemId: string) => void;\n  clearCart: () => void;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | null>(null);\n\ntype CartAction =\n  | { type: \"SET_ITEMS\"; items: (CartItem & { product: Product })[] }\n  | { type: \"ADD_ITEM\"; item: CartItem & { product: Product } }\n  | { type: \"UPDATE_ITEM\"; itemId: string; quantity: number }\n  | { type: \"REMOVE_ITEM\"; itemId: string }\n  | { type: \"CLEAR_CART\" };\n\nfunction cartReducer(state: CartState, action: CartAction): CartState {\n  switch (action.type) {\n    case \"SET_ITEMS\": {\n      const items = action.items;\n      const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n      const total = items.reduce((sum, item) => sum + parseFloat(item.product.price) * item.quantity, 0);\n      return { items, itemCount, total };\n    }\n    case \"ADD_ITEM\": {\n      const existingItemIndex = state.items.findIndex(item => item.productId === action.item.productId);\n      let items;\n      \n      if (existingItemIndex >= 0) {\n        items = [...state.items];\n        items[existingItemIndex] = {\n          ...items[existingItemIndex],\n          quantity: items[existingItemIndex].quantity + action.item.quantity,\n        };\n      } else {\n        items = [...state.items, action.item];\n      }\n      \n      const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n      const total = items.reduce((sum, item) => sum + parseFloat(item.product.price) * item.quantity, 0);\n      return { items, itemCount, total };\n    }\n    case \"UPDATE_ITEM\": {\n      const items = state.items.map(item =>\n        item.id === action.itemId ? { ...item, quantity: action.quantity } : item\n      );\n      const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n      const total = items.reduce((sum, item) => sum + parseFloat(item.product.price) * item.quantity, 0);\n      return { items, itemCount, total };\n    }\n    case \"REMOVE_ITEM\": {\n      const items = state.items.filter(item => item.id !== action.itemId);\n      const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n      const total = items.reduce((sum, item) => sum + parseFloat(item.product.price) * item.quantity, 0);\n      return { items, itemCount, total };\n    }\n    case \"CLEAR_CART\":\n      return { items: [], itemCount: 0, total: 0 };\n    default:\n      return state;\n  }\n}\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [state, dispatch] = useReducer(cartReducer, {\n    items: [],\n    itemCount: 0,\n    total: 0,\n  });\n\n  const { data: cartItems, isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (cartItems && Array.isArray(cartItems)) {\n      dispatch({ type: \"SET_ITEMS\", items: cartItems });\n    } else if (!isAuthenticated) {\n      // Reset cart when user is not authenticated\n      dispatch({ type: \"CLEAR_CART\" });\n    }\n  }, [cartItems, isAuthenticated]);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity = 1 }: { productId: string; quantity?: number }) => {\n      await apiRequest(\"POST\", \"/api/cart\", { productId, quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Produto adicionado ao carrinho\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel adicionar o produto ao carrinho\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      await apiRequest(\"PUT\", `/api/cart/${itemId}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel atualizar a quantidade\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Produto removido\",\n        description: \"O produto foi removido do carrinho\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel remover o produto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/cart\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      dispatch({ type: \"CLEAR_CART\" });\n    },\n  });\n\n  const contextValue: CartContextType = {\n    ...state,\n    addToCart: (productId: string, quantity = 1) => {\n      if (!isAuthenticated) {\n        toast({\n          title: \"Login necessÃ¡rio\",\n          description: \"FaÃ§a login para adicionar produtos ao carrinho\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      addToCartMutation.mutate({ productId, quantity });\n    },\n    updateQuantity: (itemId: string, quantity: number) => {\n      updateQuantityMutation.mutate({ itemId, quantity });\n    },\n    removeFromCart: (itemId: string) => {\n      removeFromCartMutation.mutate(itemId);\n    },\n    clearCart: () => {\n      clearCartMutation.mutate();\n    },\n    isLoading: isLoading || addToCartMutation.isPending || updateQuantityMutation.isPending || removeFromCartMutation.isPending,\n  };\n\n  return (\n    <CartContext.Provider value={contextValue}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n","size_bytes":6697},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Build URL with proper query parameter handling\n    let url = queryKey[0] as string;\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      Object.entries(queryKey[1] as Record<string, string>).forEach(([key, value]) => {\n        params.append(key, value);\n      });\n      url += `?${params.toString()}`;\n    } else if (queryKey.length > 1) {\n      // Fallback to join with / for non-object parameters\n      url = queryKey.join(\"/\") as string;\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1904},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Cart.tsx":{"content":"import { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { useDelivery } from \"@/contexts/DeliveryContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Minus, Plus, Trash2, ShoppingBag, MapPin, CheckCircle, XCircle, QrCode } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product, Address } from \"@shared/schema\";\n\nexport default function Cart() {\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { items, itemCount, total, updateQuantity, removeFromCart, clearCart, isLoading, addToCart } = useCart();\n  const { cep, available, city, state, setCep, setDeliveryInfo } = useDelivery();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch products for the \"continuar comprando\" section\n  const { data: products } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Fetch user's saved addresses\n  const { data: savedAddresses } = useQuery<Address[]>({\n    queryKey: [\"/api/addresses\"],\n    enabled: isAuthenticated,\n  });\n\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n  const [addressForm, setAddressForm] = useState({\n    cep: \"\",\n    street: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    state: \"\"\n  });\n  const [addressError, setAddressError] = useState(\"\");\n  const [cepLoading, setCepLoading] = useState(false);\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [appliedCoupon, setAppliedCoupon] = useState<{ code: string; discount: number } | null>(null);\n  const [couponError, setCouponError] = useState(\"\");\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string | null>(null);\n  const [showPixQr, setShowPixQr] = useState(false);\n  const [selectedAddressId, setSelectedAddressId] = useState<string | null>(null);\n  const [isCreatingNewAddress, setIsCreatingNewAddress] = useState(false);\n  const [shouldSaveAddress, setShouldSaveAddress] = useState(false);\n  const [addressName, setAddressName] = useState(\"\");\n\n  // Auto-select default address when checkout opens\n  useEffect(() => {\n    if (isCheckoutOpen && savedAddresses && savedAddresses.length > 0) {\n      const defaultAddress = savedAddresses.find(addr => addr.isDefault);\n      if (defaultAddress && !selectedAddressId && !isCreatingNewAddress) {\n        setSelectedAddressId(defaultAddress.id);\n      }\n    }\n  }, [isCheckoutOpen, savedAddresses, selectedAddressId, isCreatingNewAddress]);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para acessar seu carrinho\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Skeleton className=\"h-12 w-48 mb-8\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-2xl p-6\">\n                <Skeleton className=\"h-20 w-full\" />\n              </div>\n            ))}\n          </div>\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-64 w-full rounded-2xl\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const deliveryFee = total > 0 ? 5.00 : 0;\n  // Discount should only apply to product subtotal, not delivery fee\n  const discountAmount = (appliedCoupon && typeof appliedCoupon.discount === 'number' && appliedCoupon.discount > 0) \n    ? total * (appliedCoupon.discount / 100) \n    : 0;\n  \n  \n  const subtotalAfterDiscount = total - discountAmount;\n  const finalTotal = subtotalAfterDiscount + deliveryFee;\n\n  const couponMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/coupons/validate\", { code });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      setAppliedCoupon({ code: couponCode, discount: data.discount });\n      setCouponError(\"\");\n      toast({\n        title: \"Cupom aplicado!\",\n        description: data.message,\n      });\n    },\n    onError: (error: any) => {\n      // Extract just the error message from the response\n      let errorMessage = \"Erro ao validar cupom\";\n      if (error.message) {\n        try {\n          // If the error message contains JSON, parse it and extract the error field\n          const match = error.message.match(/\\{\"valid\":false,\"error\":\"([^\"]+)\"\\}/);\n          if (match && match[1]) {\n            errorMessage = match[1];\n          } else {\n            errorMessage = error.message;\n          }\n        } catch {\n          errorMessage = error.message;\n        }\n      }\n      setCouponError(errorMessage);\n      setAppliedCoupon(null);\n    },\n  });\n\n  // Create address mutation\n  const createAddressMutation = useMutation({\n    mutationFn: async (addressData: any) => {\n      return await apiRequest(\"POST\", \"/api/addresses\", addressData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/addresses\"] });\n    }\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async (deliveryAddress: string) => {\n      const orderItems = items.map(item => ({\n        productId: item.productId,\n        quantity: item.quantity\n        // Note: price is calculated server-side for security\n      }));\n      \n      return await apiRequest(\"POST\", \"/api/orders\", {\n        deliveryAddress,\n        items: orderItems,\n        couponCode: appliedCoupon?.code || null,\n        paymentMethod: selectedPaymentMethod\n      });\n    },\n    onSuccess: () => {\n      // Clear local cart state\n      clearCart();\n      // Invalidate orders cache to show new order in profile\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setIsCheckoutOpen(false);\n      setAddressForm({\n        cep: \"\",\n        street: \"\",\n        number: \"\",\n        complement: \"\",\n        neighborhood: \"\",\n        city: \"\",\n        state: \"\"\n      });\n      toast({\n        title: \"Pedido realizado com sucesso!\",\n        description: \"Seu pedido foi confirmado e estÃ¡ sendo preparado.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro ao finalizar pedido\",\n        description: \"Tente novamente em alguns instantes.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApplyCoupon = () => {\n    if (!couponCode.trim()) {\n      setCouponError(\"Por favor, insira um cÃ³digo de cupom\");\n      return;\n    }\n    setCouponError(\"\");\n    couponMutation.mutate(couponCode.trim());\n  };\n\n  const handleRemoveCoupon = () => {\n    setAppliedCoupon(null);\n    setCouponCode(\"\");\n    setCouponError(\"\");\n    toast({\n      title: \"Cupom removido\",\n      description: \"O cupom foi removido do seu pedido.\",\n    });\n  };\n\n  const handlePaymentMethodSelect = (method: string) => {\n    setSelectedPaymentMethod(method);\n    if (method === 'pix') {\n      setShowPixQr(true);\n    } else {\n      setShowPixQr(false);\n    }\n  };\n\n  const generateFakeQrCode = () => {\n    // Generate a fake QR code pattern using squares\n    const qrSize = 25;\n    const pattern = [];\n    \n    for (let i = 0; i < qrSize; i++) {\n      const row = [];\n      for (let j = 0; j < qrSize; j++) {\n        // Create a pseudo-random pattern based on position\n        const shouldFill = (i + j + Math.floor(i/3) + Math.floor(j/3)) % 3 === 0;\n        row.push(shouldFill);\n      }\n      pattern.push(row);\n    }\n    \n    return pattern;\n  };\n\n  const validateCep = (cep: string): string => {\n    if (!cep.trim()) {\n      return \"CEP Ã© obrigatÃ³rio\";\n    }\n    \n    const cleanCep = cep.replace(/\\D/g, '');\n    if (cleanCep.length !== 8) {\n      return \"CEP deve conter 8 dÃ­gitos\";\n    }\n    \n    return \"\";\n  };\n\n  const validateAddressForm = (): string => {\n    if (!addressForm.cep.trim()) {\n      return \"CEP Ã© obrigatÃ³rio\";\n    }\n    \n    if (!addressForm.street.trim()) {\n      return \"Logradouro Ã© obrigatÃ³rio\";\n    }\n    \n    if (!addressForm.number.trim()) {\n      return \"NÃºmero Ã© obrigatÃ³rio\";\n    }\n    \n    if (!addressForm.neighborhood.trim()) {\n      return \"Bairro Ã© obrigatÃ³rio\";\n    }\n    \n    if (!addressForm.city.trim()) {\n      return \"Cidade Ã© obrigatÃ³ria\";\n    }\n    \n    if (!addressForm.state.trim()) {\n      return \"Estado Ã© obrigatÃ³rio\";\n    }\n    \n    return \"\";\n  };\n\n  const handleCepLookup = async (cep: string) => {\n    const cepError = validateCep(cep);\n    if (cepError) {\n      setAddressError(cepError);\n      return;\n    }\n\n    setCepLoading(true);\n    setAddressError(\"\");\n\n    try {\n      const response = await fetch(`/api/cep/${cep.replace(/\\D/g, '')}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        setAddressError(data.error || \"Erro ao consultar CEP\");\n        return;\n      }\n\n      // Auto-fill the address fields\n      setAddressForm(prev => ({\n        ...prev,\n        cep: data.cep,\n        street: data.street,\n        neighborhood: data.neighborhood,\n        city: data.city,\n        state: data.state,\n        complement: data.complement\n      }));\n\n      toast({\n        title: \"CEP encontrado!\",\n        description: `${data.street}, ${data.neighborhood}, ${data.city}`,\n      });\n    } catch (error) {\n      setAddressError(\"Erro ao consultar CEP\");\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel consultar o CEP\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setCepLoading(false);\n    }\n  };\n\n  const handleAddressFieldChange = (field: keyof typeof addressForm, value: string) => {\n    setAddressForm(prev => ({ ...prev, [field]: value }));\n    setAddressError(\"\");\n  };\n\n  // Delivery check functionality\n  const deliveryCheckMutation = useMutation({\n    mutationFn: async (cepToCheck: string) => {\n      const cleanCep = cepToCheck.replace(/\\D/g, '');\n      if (cleanCep.length !== 8) {\n        throw new Error('CEP deve conter 8 dÃ­gitos');\n      }\n\n      const response = await fetch(`/api/cep/${cleanCep}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao consultar CEP');\n      }\n\n      return data;\n    },\n    onSuccess: (data) => {\n      const available = isDeliveryAvailable(data.city, data.state);\n      setDeliveryInfo({\n        available,\n        city: data.city,\n        state: data.state,\n        cep: data.cep\n      });\n\n      if (available) {\n        toast({\n          title: \"â Entregamos na sua regiÃ£o!\",\n          description: `${data.city}, ${data.state} - CEP ${data.cep}`,\n        });\n      } else {\n        toast({\n          title: \"â NÃ£o entregamos nesta regiÃ£o\",\n          description: `Atualmente entregamos apenas em JoÃ£o Pessoa, PB. VocÃª estÃ¡ em ${data.city}, ${data.state}.`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao consultar CEP\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCepCheck = () => {\n    if (cep.trim()) {\n      deliveryCheckMutation.mutate(cep);\n    }\n  };\n\n  // Normalize city name for comparison (remove accents and convert to uppercase)\n  const normalizeCity = (cityName: string): string => {\n    return cityName\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .toUpperCase()\n      .trim();\n  };\n\n  // Check if delivery is available for JoÃ£o Pessoa, PB\n  const isDeliveryAvailable = (cityName: string, stateName: string): boolean => {\n    const normalizedCity = normalizeCity(cityName);\n    const normalizedState = stateName.toUpperCase().trim();\n    return normalizedCity === 'JOAO PESSOA' && normalizedState === 'PB';\n  };\n\n  const handleCheckout = async () => {\n    let deliveryAddress = \"\";\n    \n    if (selectedAddressId && savedAddresses) {\n      // Using saved address\n      const selectedAddress = savedAddresses.find(addr => addr.id === selectedAddressId);\n      if (!selectedAddress) {\n        setAddressError(\"EndereÃ§o selecionado nÃ£o encontrado\");\n        return;\n      }\n      \n      // Format saved address\n      deliveryAddress = [\n        selectedAddress.street,\n        selectedAddress.number,\n        selectedAddress.complement && selectedAddress.complement.trim() ? selectedAddress.complement : null,\n        selectedAddress.neighborhood,\n        selectedAddress.city,\n        selectedAddress.state,\n        selectedAddress.cep\n      ].filter(Boolean).join(', ');\n      \n      // Check delivery availability\n      if (!isDeliveryAvailable(selectedAddress.city, selectedAddress.state)) {\n        setAddressError(\"Entrega nÃ£o disponÃ­vel para esta localidade\");\n        toast({\n          title: \"Entrega nÃ£o disponÃ­vel\", \n          description: `NÃ£o entregamos em ${selectedAddress.city}, ${selectedAddress.state}. Atualmente entregamos apenas em JoÃ£o Pessoa, PB.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else if (isCreatingNewAddress) {\n      // Creating new address\n      const addressValidationError = validateAddressForm();\n      if (addressValidationError) {\n        setAddressError(addressValidationError);\n        toast({\n          title: \"EndereÃ§o invÃ¡lido\",\n          description: addressValidationError,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Check delivery availability\n      if (!isDeliveryAvailable(addressForm.city, addressForm.state)) {\n        setAddressError(\"Entrega nÃ£o disponÃ­vel para esta localidade\");\n        toast({\n          title: \"Entrega nÃ£o disponÃ­vel\",\n          description: `NÃ£o entregamos em ${addressForm.city}, ${addressForm.state}. Atualmente entregamos apenas em JoÃ£o Pessoa, PB.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Format the complete address for the API\n      deliveryAddress = [\n        addressForm.street,\n        addressForm.number,\n        addressForm.complement && addressForm.complement.trim() ? addressForm.complement : null,\n        addressForm.neighborhood,\n        addressForm.city,\n        addressForm.state,\n        addressForm.cep\n      ].filter(Boolean).join(', ');\n      \n      // Save address if requested\n      if (shouldSaveAddress && addressName.trim()) {\n        try {\n          await createAddressMutation.mutateAsync({\n            name: addressName,\n            cep: addressForm.cep.replace(/\\D/g, ''),\n            street: addressForm.street,\n            number: addressForm.number,\n            complement: addressForm.complement,\n            neighborhood: addressForm.neighborhood,\n            city: addressForm.city,\n            state: addressForm.state,\n            isDefault: false\n          });\n        } catch (error) {\n          console.error(\"Error saving address:\", error);\n          // Continue with checkout even if address saving fails\n        }\n      }\n    } else {\n      setAddressError(\"Por favor, selecione um endereÃ§o ou crie um novo\");\n      return;\n    }\n    \n    setAddressError(\"\");\n    checkoutMutation.mutate(deliveryAddress);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-serif font-bold text-foreground mb-8\" data-testid=\"text-cart-title\">\n        Seu Carrinho\n      </h1>\n\n      {items.length === 0 ? (\n        <div className=\"text-center py-16\" data-testid=\"empty-cart\">\n          <ShoppingBag className=\"h-24 w-24 mx-auto text-muted-foreground mb-6\" />\n          <h2 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Seu carrinho estÃ¡ vazio\n          </h2>\n          <p className=\"text-muted-foreground mb-8\">\n            Que tal adicionar alguns cupcakes deliciosos?\n          </p>\n          <Link href=\"/catalog\" data-testid=\"link-shop-now\">\n            <Button size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              ComeÃ§ar a Comprar\n            </Button>\n          </Link>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {items.map((item) => (\n              <div key={item.id} className=\"bg-card rounded-2xl p-6 shadow-lg\" data-testid={`cart-item-${item.id}`}>\n                <div className=\"flex items-center space-x-4\">\n                  <img \n                    src={item.product.imageUrl} \n                    alt={item.product.name}\n                    className=\"w-20 h-20 object-cover rounded-xl\"\n                    data-testid={`img-cart-item-${item.id}`}\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-serif font-bold text-foreground mb-1\" data-testid={`text-item-name-${item.id}`}>\n                      {item.product.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-item-description-${item.id}`}>\n                      {item.product.description.length > 50 \n                        ? `${item.product.description.substring(0, 50)}...`\n                        : item.product.description\n                      }\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-bold text-primary\" data-testid={`text-item-price-${item.id}`}>\n                        R$ {parseFloat(item.product.price).toFixed(2).replace('.', ',')}\n                      </span>\n                      <div className=\"flex items-center space-x-3\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => updateQuantity(item.id, Math.max(1, item.quantity - 1))}\n                          disabled={item.quantity <= 1 || isLoading}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                        <span className=\"font-medium px-2\" data-testid={`text-quantity-${item.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          disabled={isLoading}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeFromCart(item.id)}\n                          disabled={isLoading}\n                          className=\"text-destructive hover:text-destructive/80 ml-4\"\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <Trash2 className=\"h-5 w-5\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            <div className=\"bg-accent border border-border rounded-2xl p-6\">\n              <h3 className=\"font-serif font-bold text-foreground mb-4\">Continuar Comprando</h3>\n              <p className=\"text-muted-foreground mb-4\">Que tal adicionar mais sabores especiais?</p>\n              \n              {/* Product Miniatures Grid */}\n              {products && Array.isArray(products) && products.length > 0 && (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2 gap-3 mb-4\">\n                  {products\n                    .filter((product) => !items.some((item) => item.productId === product.id))\n                    .slice(0, 6)\n                    .map((product) => (\n                    <div \n                      key={product.id} \n                      className=\"bg-background rounded-lg p-3 border border-border hover:shadow-md transition-shadow\"\n                      data-testid={`mini-product-${product.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <img \n                          src={product.imageUrl} \n                          alt={product.name}\n                          className=\"w-12 h-12 object-cover rounded-lg\"\n                          data-testid={`img-mini-product-${product.id}`}\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-medium text-sm text-foreground truncate\" data-testid={`text-mini-product-name-${product.id}`}>\n                            {product.name}\n                          </h4>\n                          <p className=\"text-xs text-primary font-semibold\" data-testid={`text-mini-product-price-${product.id}`}>\n                            R$ {parseFloat(product.price).toFixed(2).replace('.', ',')}\n                          </p>\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          onClick={() => addToCart(product.id)}\n                          className=\"bg-primary hover:bg-primary/90 px-3 py-1 text-xs\"\n                          data-testid={`button-add-mini-product-${product.id}`}\n                        >\n                          <Plus className=\"h-3 w-3 mr-1\" />\n                          Add\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <Link href=\"/catalog\" data-testid=\"link-continue-shopping\">\n                <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90 w-full\">\n                  Ver CatÃ¡logo Completo\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-card rounded-2xl p-6 shadow-lg\">\n              <h3 className=\"font-serif font-bold text-foreground mb-6\">Resumo do Pedido</h3>\n              \n              {/* Delivery Checker */}\n              <div className=\"space-y-4 mb-6 border-b border-border pb-6\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-foreground\">Verificar entrega</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Digite seu CEP\"\n                        value={cep}\n                        onChange={(e) => {\n                          const value = e.target.value.replace(/\\D/g, '').replace(/(\\d{5})(\\d)/, '$1-$2');\n                          setCep(value);\n                        }}\n                        onKeyDown={(e) => e.key === 'Enter' && handleCepCheck()}\n                        maxLength={9}\n                        className=\"text-sm\"\n                        data-testid=\"input-delivery-cep\"\n                      />\n                      <Button\n                        onClick={handleCepCheck}\n                        disabled={deliveryCheckMutation.isPending || !cep.trim()}\n                        size=\"sm\"\n                        className=\"bg-primary hover:bg-primary/90\"\n                        data-testid=\"button-check-delivery\"\n                      >\n                        {deliveryCheckMutation.isPending ? \"...\" : \"Verificar\"}\n                      </Button>\n                    </div>\n                  </div>\n                  {available !== null && (\n                    <div className=\"flex items-center gap-2\">\n                      <Badge \n                        variant={available ? \"default\" : \"destructive\"}\n                        className=\"text-xs\"\n                        data-testid={`badge-delivery-${available ? 'available' : 'unavailable'}`}\n                      >\n                        {available ? (\n                          <><CheckCircle className=\"h-3 w-3 mr-1\" />Entregamos</>\n                        ) : (\n                          <><XCircle className=\"h-3 w-3 mr-1\" />NÃ£o entregamos</>\n                        )}\n                      </Badge>\n                      {city && state && (\n                        <span className=\"text-xs text-muted-foreground\" data-testid=\"text-delivery-location\">\n                          {city}, {state}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-4 mb-6\">\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>Subtotal ({itemCount} {itemCount === 1 ? 'item' : 'itens'})</span>\n                  <span data-testid=\"text-subtotal\">R$ {total.toFixed(2).replace('.', ',')}</span>\n                </div>\n                {appliedCoupon && (\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>Desconto ({appliedCoupon.code})</span>\n                    <span data-testid=\"text-discount\">-R$ {discountAmount.toFixed(2).replace('.', ',')}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>Taxa de entrega</span>\n                  <span data-testid=\"text-delivery-fee\">\n                    {deliveryFee > 0 ? `R$ ${deliveryFee.toFixed(2).replace('.', ',')}` : 'GrÃ¡tis'}\n                  </span>\n                </div>\n                <div className=\"border-t border-border pt-4\">\n                  <div className=\"flex justify-between text-xl font-bold text-foreground\">\n                    <span>Total</span>\n                    <span data-testid=\"text-total\">R$ {finalTotal.toFixed(2).replace('.', ',')}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                {appliedCoupon ? (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <span className=\"text-green-800 font-medium\">Cupom {appliedCoupon.code}</span>\n                        <p className=\"text-green-600 text-sm\">{appliedCoupon.discount}% de desconto aplicado</p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleRemoveCoupon}\n                        className=\"text-green-700 hover:text-green-800\"\n                        data-testid=\"button-remove-coupon\"\n                      >\n                        Remover\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div className=\"relative\">\n                      <Input \n                        placeholder=\"CÃ³digo do cupom\"\n                        className=\"pr-20\"\n                        value={couponCode}\n                        onChange={(e) => setCouponCode(e.target.value)}\n                        onKeyDown={(e) => e.key === 'Enter' && handleApplyCoupon()}\n                        data-testid=\"input-coupon\"\n                      />\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"absolute right-1 top-1 bottom-1\"\n                        onClick={handleApplyCoupon}\n                        disabled={couponMutation.isPending || !couponCode.trim()}\n                        data-testid=\"button-apply-coupon\"\n                      >\n                        {couponMutation.isPending ? \"...\" : \"Aplicar\"}\n                      </Button>\n                    </div>\n                    {couponError && (\n                      <p className=\"text-sm text-red-600\" data-testid=\"text-coupon-error\">{couponError}</p>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-accent rounded-xl\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <span className=\"text-lg\">ð</span>\n                  <span className=\"font-medium text-foreground\">Entrega Expressa</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receba em atÃ© 2 horas na sua casa!\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-2xl p-6 shadow-lg\">\n              <h3 className=\"font-serif font-bold text-foreground mb-4\">OpÃ§Ãµes de Pagamento</h3>\n              <div className=\"space-y-3 mb-6\">\n                <div \n                  className={`flex items-center space-x-2 p-3 rounded-lg border-2 cursor-pointer transition-colors ${\n                    selectedPaymentMethod === 'pix' \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  onClick={() => handlePaymentMethodSelect('pix')}\n                  data-testid=\"option-payment-pix\"\n                >\n                  <span className=\"text-lg\">ð±</span>\n                  <div>\n                    <p className=\"font-medium text-foreground\">PIX</p>\n                    <p className=\"text-sm text-muted-foreground\">Pagamento instantÃ¢neo</p>\n                  </div>\n                </div>\n                <div \n                  className={`flex items-center space-x-2 p-3 rounded-lg border-2 cursor-pointer transition-colors ${\n                    selectedPaymentMethod === 'cash' \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  onClick={() => handlePaymentMethodSelect('cash')}\n                  data-testid=\"option-payment-cash\"\n                >\n                  <span className=\"text-lg\">ð°</span>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Dinheiro na Entrega</p>\n                    <p className=\"text-sm text-muted-foreground\">Troco disponÃ­vel</p>\n                  </div>\n                </div>\n              </div>\n\n              {showPixQr && selectedPaymentMethod === 'pix' && (\n                <div className=\"mb-6 p-4 bg-accent rounded-xl text-center\">\n                  <h4 className=\"font-medium text-foreground mb-3\">CÃ³digo PIX</h4>\n                  <div className=\"bg-white p-4 rounded-lg inline-block\">\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(25, 1fr)', gap: 0}} className=\"mx-auto w-fit\">\n                      {generateFakeQrCode().flatMap((row, i) => \n                        row.map((filled, j) => (\n                          <div\n                            key={`${i}-${j}`}\n                            className={`w-2 h-2 ${filled ? 'bg-black' : 'bg-white'}`}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-3\">\n                    Escaneie o cÃ³digo com seu aplicativo do banco\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    CÃ³digo: 00020126330014BR.GOV.BCB.PIX2711doce-delicia5204000053039865802BR5913DOCE DELICIA6009SAO PAULO62070503***6304ABCD\n                  </p>\n                </div>\n              )}\n\n              <Dialog open={isCheckoutOpen} onOpenChange={setIsCheckoutOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\" \n                    size=\"lg\"\n                    disabled={items.length === 0 || !selectedPaymentMethod}\n                    data-testid=\"button-checkout\"\n                  >\n                    Finalizar Pedido\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      EndereÃ§o de Entrega\n                    </DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    {/* Address Selection */}\n                    {savedAddresses && savedAddresses.length > 0 && (\n                      <div className=\"space-y-3\">\n                        <Label>EndereÃ§os Salvos</Label>\n                        <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                          {savedAddresses.map((address) => (\n                            <div\n                              key={address.id}\n                              className={`p-3 rounded-lg border-2 cursor-pointer transition-colors ${\n                                selectedAddressId === address.id\n                                  ? 'border-primary bg-primary/5'\n                                  : 'border-border hover:border-primary/50'\n                              }`}\n                              onClick={() => {\n                                setSelectedAddressId(address.id);\n                                setIsCreatingNewAddress(false);\n                                setAddressError(\"\");\n                              }}\n                              data-testid={`address-option-${address.id}`}\n                            >\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <p className=\"font-medium text-foreground\">{address.name}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {address.street}, {address.number}\n                                    {address.complement && `, ${address.complement}`}\n                                  </p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {address.neighborhood}, {address.city} - {address.state}\n                                  </p>\n                                  <p className=\"text-sm text-muted-foreground\">CEP: {address.cep}</p>\n                                </div>\n                                {address.isDefault && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">PadrÃ£o</Badge>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* New Address Option */}\n                    <div className=\"space-y-3\">\n                      <div\n                        className={`p-3 rounded-lg border-2 cursor-pointer transition-colors ${\n                          isCreatingNewAddress\n                            ? 'border-primary bg-primary/5'\n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => {\n                          setIsCreatingNewAddress(true);\n                          setSelectedAddressId(null);\n                          setAddressError(\"\");\n                        }}\n                        data-testid=\"option-new-address\"\n                      >\n                        <p className=\"font-medium text-foreground\">+ Criar novo endereÃ§o</p>\n                      </div>\n\n                      {/* New Address Form */}\n                      {isCreatingNewAddress && (\n                        <div className=\"space-y-4 border rounded-lg p-4 bg-accent/20\">\n                          {/* Address Name for Saving */}\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <input\n                                type=\"checkbox\"\n                                id=\"save-address\"\n                                checked={shouldSaveAddress}\n                                onChange={(e) => setShouldSaveAddress(e.target.checked)}\n                                className=\"w-4 h-4\"\n                                data-testid=\"checkbox-save-address\"\n                              />\n                              <Label htmlFor=\"save-address\" className=\"text-sm\">\n                                Salvar este endereÃ§o para futuros pedidos\n                              </Label>\n                            </div>\n                            {shouldSaveAddress && (\n                              <Input\n                                placeholder=\"Nome do endereÃ§o (ex: Casa, Trabalho)\"\n                                value={addressName}\n                                onChange={(e) => setAddressName(e.target.value)}\n                                data-testid=\"input-address-name\"\n                              />\n                            )}\n                          </div>\n\n                          {/* CEP Lookup */}\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"cep\">CEP</Label>\n                            <div className=\"flex gap-2\">\n                              <Input\n                                id=\"cep\"\n                                placeholder=\"00000-000\"\n                                value={addressForm.cep}\n                                onChange={(e) => {\n                                  const value = e.target.value.replace(/\\D/g, '').replace(/(\\d{5})(\\d)/, '$1-$2');\n                                  handleAddressFieldChange('cep', value);\n                                }}\n                                onBlur={() => addressForm.cep && handleCepLookup(addressForm.cep)}\n                                maxLength={9}\n                                className={addressError ? \"border-red-500\" : \"\"}\n                                data-testid=\"input-cep\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => handleCepLookup(addressForm.cep)}\n                                disabled={cepLoading || !addressForm.cep}\n                                data-testid=\"button-search-cep\"\n                              >\n                                {cepLoading ? \"...\" : \"Buscar\"}\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Address Fields */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div className=\"md:col-span-2\">\n                              <Label htmlFor=\"street\">Logradouro</Label>\n                              <Input\n                                id=\"street\"\n                                placeholder=\"Rua, Avenida, etc.\"\n                                value={addressForm.street}\n                                onChange={(e) => handleAddressFieldChange('street', e.target.value)}\n                                readOnly={!!addressForm.street}\n                                className={!!addressForm.street ? \"bg-gray-100\" : \"\"}\n                                data-testid=\"input-street\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"number\">NÃºmero *</Label>\n                              <Input\n                                id=\"number\"\n                                placeholder=\"123\"\n                                value={addressForm.number}\n                                onChange={(e) => handleAddressFieldChange('number', e.target.value)}\n                                data-testid=\"input-number\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"complement\">Complemento</Label>\n                              <Input\n                                id=\"complement\"\n                                placeholder=\"Apt 45, Bloco B, etc.\"\n                                value={addressForm.complement}\n                                onChange={(e) => handleAddressFieldChange('complement', e.target.value)}\n                                data-testid=\"input-complement\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"neighborhood\">Bairro</Label>\n                              <Input\n                                id=\"neighborhood\"\n                                placeholder=\"Nome do bairro\"\n                                value={addressForm.neighborhood}\n                                onChange={(e) => handleAddressFieldChange('neighborhood', e.target.value)}\n                                readOnly={!!addressForm.neighborhood}\n                                className={!!addressForm.neighborhood ? \"bg-gray-100\" : \"\"}\n                                data-testid=\"input-neighborhood\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"city\">Cidade</Label>\n                              <Input\n                                id=\"city\"\n                                placeholder=\"Nome da cidade\"\n                                value={addressForm.city}\n                                onChange={(e) => handleAddressFieldChange('city', e.target.value)}\n                                readOnly={!!addressForm.city}\n                                className={!!addressForm.city ? \"bg-gray-100\" : \"\"}\n                                data-testid=\"input-city\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"state\">Estado</Label>\n                              <Input\n                                id=\"state\"\n                                placeholder=\"UF\"\n                                value={addressForm.state}\n                                onChange={(e) => handleAddressFieldChange('state', e.target.value.toUpperCase())}\n                                readOnly={!!addressForm.state}\n                                className={!!addressForm.state ? \"bg-gray-100\" : \"\"}\n                                maxLength={2}\n                                data-testid=\"input-state\"\n                              />\n                            </div>\n                          </div>\n\n                          <p className=\"text-xs text-muted-foreground\">\n                            Digite o CEP e clique em \"Buscar\" para preencher automaticamente o endereÃ§o\n                          </p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Error Display */}\n                    {addressError && (\n                      <p className=\"text-sm text-red-600\" data-testid=\"text-address-error\">\n                        {addressError}\n                      </p>\n                    )}\n                    \n                    <div className=\"bg-accent p-4 rounded-lg\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"font-medium\">Total do pedido:</span>\n                        <span className=\"font-bold text-lg\">R$ {finalTotal.toFixed(2).replace('.', ',')}</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {itemCount} {itemCount === 1 ? 'item' : 'itens'} â¢ Entrega em atÃ© 2 horas\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsCheckoutOpen(false)}\n                        className=\"flex-1\"\n                        data-testid=\"button-cancel-checkout\"\n                      >\n                        Cancelar\n                      </Button>\n                      <Button \n                        onClick={handleCheckout}\n                        disabled={\n                          checkoutMutation.isPending || \n                          createAddressMutation.isPending ||\n                          (!selectedAddressId && !isCreatingNewAddress) ||\n                          (isCreatingNewAddress && (!!validateAddressForm() || !!addressError)) ||\n                          (shouldSaveAddress && !addressName.trim())\n                        }\n                        className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n                        data-testid=\"button-confirm-checkout\"\n                      >\n                        {(checkoutMutation.isPending || createAddressMutation.isPending) ? \"Processando...\" : \"Confirmar Pedido\"}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":46781},"client/src/pages/Catalog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport ProductCard from \"@/components/ProductCard\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search } from \"lucide-react\";\nimport type { Product, Category } from \"@shared/schema\";\n\nexport default function Catalog() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [priceRange, setPriceRange] = useState<string>(\"\");\n  const [sortBy, setSortBy] = useState<string>(\"popular\");\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Filter and sort products\n  const filteredProducts = (products as Product[] || []).filter((product: Product) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = !selectedCategory || selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    \n    const matchesPriceRange = (() => {\n      if (!priceRange || priceRange === \"all\") return true;\n      const price = parseFloat(product.price);\n      switch (priceRange) {\n        case \"5-8\": return price >= 5 && price <= 8;\n        case \"8-12\": return price >= 8 && price <= 12;\n        case \"12+\": return price >= 12;\n        default: return true;\n      }\n    })();\n\n    return matchesSearch && matchesCategory && matchesPriceRange;\n  }).sort((a: Product, b: Product) => {\n    switch (sortBy) {\n      case \"price-low\": return parseFloat(a.price) - parseFloat(b.price);\n      case \"price-high\": return parseFloat(b.price) - parseFloat(a.price);\n      case \"name\": return a.name.localeCompare(b.name);\n      default: return b.isFeatured ? 1 : -1; // Featured first\n    }\n  });\n\n  return (\n    <div className=\"container mx-auto px-3 sm:px-4 py-6 sm:py-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 sm:mb-12\">\n        <h1 className=\"text-3xl sm:text-4xl font-serif font-bold text-foreground mb-3 sm:mb-4\" data-testid=\"text-catalog-title\">\n          Nosso CatÃ¡logo\n        </h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground px-4\" data-testid=\"text-catalog-description\">\n          Descubra todos os nossos sabores especiais\n        </p>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"bg-card rounded-2xl p-4 sm:p-6 mb-8 shadow-lg\">\n        <div className=\"flex flex-col gap-4\">\n          {/* Search bar - always full width on mobile */}\n          <div className=\"relative w-full\">\n            <Input\n              type=\"text\"\n              placeholder=\"Buscar cupcakes...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 h-11\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n          </div>\n          \n          {/* Filters row - responsive layout */}\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n            {/* Category filter */}\n            <div className=\"flex-1\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-full h-11\" data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Todas as Categorias\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as Categorias</SelectItem>\n                  {(categories as Category[] || []).map((category: Category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Price filter */}\n            <div className=\"flex-1\">\n              <Select value={priceRange} onValueChange={setPriceRange}>\n                <SelectTrigger className=\"w-full h-11\" data-testid=\"select-price\">\n                  <SelectValue placeholder=\"Faixa de PreÃ§o\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as Faixas</SelectItem>\n                  <SelectItem value=\"5-8\">R$ 5 - R$ 8</SelectItem>\n                  <SelectItem value=\"8-12\">R$ 8 - R$ 12</SelectItem>\n                  <SelectItem value=\"12+\">R$ 12+</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Sort filter */}\n            <div className=\"flex-1\">\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-full h-11\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Ordenar\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"popular\">Mais Populares</SelectItem>\n                  <SelectItem value=\"price-low\">Menor PreÃ§o</SelectItem>\n                  <SelectItem value=\"price-high\">Maior PreÃ§o</SelectItem>\n                  <SelectItem value=\"name\">Nome A-Z</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          {/* Quick clear button on mobile when filters are active */}\n          {(searchQuery || selectedCategory || priceRange || sortBy !== \"popular\") && (\n            <div className=\"flex justify-center sm:justify-end\">\n              <Button \n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setSelectedCategory(\"\");\n                  setPriceRange(\"\");\n                  setSortBy(\"popular\");\n                }}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-xs\"\n                data-testid=\"button-clear-all-filters\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {productsLoading ? (\n          Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"bg-card rounded-2xl overflow-hidden\">\n              <Skeleton className=\"w-full h-48\" />\n              <div className=\"p-4\">\n                <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-3\" />\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton className=\"h-6 w-20\" />\n                  <Skeleton className=\"h-8 w-24\" />\n                </div>\n              </div>\n            </div>\n          ))\n        ) : filteredProducts && filteredProducts.length > 0 ? (\n          filteredProducts.map((product: Product) => (\n            <ProductCard key={product.id} product={product} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-products\">\n            <div className=\"text-6xl mb-4\">ð</div>\n            <h3 className=\"text-xl font-serif font-bold text-foreground mb-2\">\n              Nenhum produto encontrado\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Tente ajustar os filtros ou usar outros termos de busca.\n            </p>\n            <Button \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedCategory(\"all\");\n                setPriceRange(\"all\");\n                setSortBy(\"popular\");\n              }}\n              variant=\"outline\"\n              data-testid=\"button-clear-filters\"\n            >\n              Limpar Filtros\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Results Count */}\n      {filteredProducts && (\n        <div className=\"text-center mt-8 text-muted-foreground\" data-testid=\"text-results-count\">\n          Mostrando {filteredProducts.length} produto{filteredProducts.length !== 1 ? 's' : ''}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8560},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport ProductCard from \"@/components/ProductCard\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Star } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\nimport peopleMakingCupcakesImg from \"@assets/stock_images/people_making_cupcak_f342e731.jpg\";\n\n// Customer reviews data\nconst customerReviews = [\n  {\n    id: 1,\n    name: \"Maria Silva\",\n    rating: 5,\n    comment: \"Os cupcakes sÃ£o simplesmente divinos! O sabor de brigadeiro Ã© o melhor que jÃ¡ provei. Super recomendo!\",\n    date: \"15 de Setembro, 2025\",\n    avatar: \"MS\"\n  },\n  {\n    id: 2,\n    name: \"JoÃ£o Santos\",\n    rating: 5,\n    comment: \"Pedimos para o aniversÃ¡rio da minha filha e foi um sucesso! Os cupcakes chegaram frescos e lindos. Obrigado!\",\n    date: \"12 de Setembro, 2025\",\n    avatar: \"JS\"\n  },\n  {\n    id: 3,\n    name: \"Ana Costa\",\n    rating: 4,\n    comment: \"Qualidade excelente e sabores Ãºnicos. O atendimento tambÃ©m Ã© muito bom. Voltarei a comprar com certeza!\",\n    date: \"10 de Setembro, 2025\",\n    avatar: \"AC\"\n  },\n  {\n    id: 4,\n    name: \"Carlos Oliveira\",\n    rating: 5,\n    comment: \"Melhor cupcake de SÃ£o Paulo! O de chocolate com morango Ã© inesquecÃ­vel. ParabÃ©ns pelo trabalho!\",\n    date: \"08 de Setembro, 2025\",\n    avatar: \"CO\"\n  },\n  {\n    id: 5,\n    name: \"Lucia Fernandes\",\n    rating: 5,\n    comment: \"Sabor caseiro com apresentaÃ§Ã£o profissional. Os cupcakes da Doce DelÃ­cia sÃ£o perfeitos para qualquer ocasiÃ£o!\",\n    date: \"05 de Setembro, 2025\",\n    avatar: \"LF\"\n  },\n  {\n    id: 6,\n    name: \"Pedro Almeida\",\n    rating: 4,\n    comment: \"Ingredientes de qualidade e sabor incrÃ­vel. O cupcake de coco Ã© o meu favorito. Continuem assim!\",\n    date: \"03 de Setembro, 2025\",\n    avatar: \"PA\"\n  }\n];\n\nexport default function Home() {\n  const { isAuthenticated } = useAuth();\n  const { data: featuredProducts, isLoading } = useQuery({\n    queryKey: [\"/api/products\", { featured: \"true\" }],\n  });\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-r from-background via-accent to-secondary/20 py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col lg:flex-row items-center\">\n            <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n              <h1 className=\"text-5xl lg:text-6xl font-serif font-bold text-foreground mb-6\" data-testid=\"text-hero-title\">\n                Os Melhores <span className=\"text-primary\">Cupcakes</span> do Brasil\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\" data-testid=\"text-hero-description\">\n                Feitos com amor e ingredientes frescos, nossos cupcakes trazem o sabor da felicidade para cada momento especial.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/catalog\" data-testid=\"link-hero-catalog\" className=\"w-full sm:w-auto\">\n                  <Button size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 w-full sm:w-auto sm:min-w-[140px]\">\n                    Ver CatÃ¡logo\n                  </Button>\n                </Link>\n                <Button variant=\"outline\" size=\"lg\" className=\"w-full sm:w-auto sm:min-w-[140px]\" data-testid=\"button-hero-about\">\n                  Sobre NÃ³s\n                </Button>\n              </div>\n            </div>\n            <div className=\"lg:w-1/2 lg:pl-12\">\n              <img \n                src=\"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Cupcakes coloridos\" \n                className=\"rounded-3xl shadow-2xl w-full h-auto\"\n                data-testid=\"img-hero-cupcakes\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products or Reviews */}\n      <section className=\"py-20 bg-card\">\n        <div className=\"container mx-auto px-4\">\n          {isAuthenticated ? (\n            /* Reviews Section */\n            <>\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"text-reviews-title\">\n                  AvaliaÃ§Ãµes\n                </h2>\n                <p className=\"text-xl text-muted-foreground\" data-testid=\"text-reviews-description\">\n                  O que nossos clientes dizem sobre nossos cupcakes\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {customerReviews.map((review) => (\n                  <div key={review.id} className=\"bg-background rounded-2xl p-6 shadow-lg border border-border\" data-testid={`review-${review.id}`}>\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-semibold mr-4\" data-testid={`avatar-${review.id}`}>\n                        {review.avatar}\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-foreground\" data-testid={`name-${review.id}`}>{review.name}</h3>\n                        <div className=\"flex items-center\" data-testid={`rating-${review.id}`}>\n                          {Array.from({ length: 5 }).map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`w-4 h-4 ${\n                                i < review.rating ? \"text-yellow-400 fill-yellow-400\" : \"text-gray-300\"\n                              }`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <p className=\"text-muted-foreground mb-4 leading-relaxed\" data-testid={`comment-${review.id}`}>\n                      \"{review.comment}\"\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`date-${review.id}`}>\n                      {review.date}\n                    </p>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"text-center mt-12\">\n                <Link href=\"/catalog\" data-testid=\"link-view-all-reviews\">\n                  <Button size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    Experimente Nossos Sabores\n                  </Button>\n                </Link>\n              </div>\n            </>\n          ) : (\n            /* Featured Products Section */\n            <>\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"text-featured-title\">\n                  Destaques da Semana\n                </h2>\n                <p className=\"text-xl text-muted-foreground\" data-testid=\"text-featured-description\">\n                  Sabores especiais que conquistaram nossos clientes\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {isLoading ? (\n                  Array.from({ length: 6 }).map((_, i) => (\n                    <div key={i} className=\"bg-accent rounded-2xl overflow-hidden\">\n                      <Skeleton className=\"w-full h-64\" />\n                      <div className=\"p-6\">\n                        <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-4 w-full mb-4\" />\n                        <div className=\"flex items-center justify-between\">\n                          <Skeleton className=\"h-6 w-20\" />\n                          <Skeleton className=\"h-8 w-24\" />\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : featuredProducts && (featuredProducts as Product[]).length > 0 ? (\n                  (featuredProducts as Product[]).map((product: Product) => (\n                    <ProductCard key={product.id} product={product} featured />\n                  ))\n                ) : (\n                  <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-featured\">\n                    <p className=\"text-muted-foreground\">Nenhum produto em destaque no momento.</p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"text-center mt-12\">\n                <Link href=\"/catalog\" data-testid=\"link-view-all\">\n                  <Button size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    Ver Todos os Sabores\n                  </Button>\n                </Link>\n              </div>\n            </>\n          )}\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col lg:flex-row items-center gap-12\">\n            <div className=\"lg:w-1/2\">\n              <img \n                src={peopleMakingCupcakesImg} \n                alt=\"Pessoas fazendo cupcakes\" \n                className=\"rounded-3xl shadow-xl w-full h-auto\"\n                data-testid=\"img-about-bakery\"\n              />\n            </div>\n            <div className=\"lg:w-1/2\">\n              <h2 className=\"text-4xl font-serif font-bold text-foreground mb-6\" data-testid=\"text-about-title\">\n                Nossa HistÃ³ria Doce\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-6 leading-relaxed\" data-testid=\"text-about-description-1\">\n                HÃ¡ mais de 10 anos criando momentos especiais atravÃ©s de cupcakes Ãºnicos. \n                Combinamos receitas tradicionais brasileiras com tÃ©cnicas modernas de confeitaria.\n              </p>\n              <p className=\"text-lg text-muted-foreground mb-8 leading-relaxed\" data-testid=\"text-about-description-2\">\n                Cada cupcake Ã© feito com ingredientes selecionados e muito carinho, \n                porque acreditamos que a felicidade vem em pequenas porÃ§Ãµes.\n              </p>\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"text-center\" data-testid=\"stat-customers\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">10k+</div>\n                  <div className=\"text-muted-foreground\">Clientes Felizes</div>\n                </div>\n                <div className=\"text-center\" data-testid=\"stat-flavors\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">50+</div>\n                  <div className=\"text-muted-foreground\">Sabores Ãnicos</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11071},"client/src/pages/Landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star } from \"lucide-react\";\n\n// Customer reviews data\nconst customerReviews = [\n  {\n    id: 1,\n    name: \"Maria Silva\",\n    rating: 5,\n    comment: \"Os cupcakes sÃ£o simplesmente divinos! O sabor de brigadeiro Ã© o melhor que jÃ¡ provei. Super recomendo!\",\n    date: \"15 de Setembro, 2025\",\n    avatar: \"MS\"\n  },\n  {\n    id: 2,\n    name: \"JoÃ£o Santos\",\n    rating: 5,\n    comment: \"Pedimos para o aniversÃ¡rio da minha filha e foi um sucesso! Os cupcakes chegaram frescos e lindos. Obrigado!\",\n    date: \"12 de Setembro, 2025\",\n    avatar: \"JS\"\n  },\n  {\n    id: 3,\n    name: \"Ana Costa\",\n    rating: 4,\n    comment: \"Qualidade excelente e sabores Ãºnicos. O atendimento tambÃ©m Ã© muito bom. Voltarei a comprar com certeza!\",\n    date: \"10 de Setembro, 2025\",\n    avatar: \"AC\"\n  },\n  {\n    id: 4,\n    name: \"Carlos Oliveira\",\n    rating: 5,\n    comment: \"Melhor cupcake de SÃ£o Paulo! O de chocolate com morango Ã© inesquecÃ­vel. ParabÃ©ns pelo trabalho!\",\n    date: \"08 de Setembro, 2025\",\n    avatar: \"CO\"\n  },\n  {\n    id: 5,\n    name: \"Lucia Fernandes\",\n    rating: 5,\n    comment: \"Sabor caseiro com apresentaÃ§Ã£o profissional. Os cupcakes da Doce DelÃ­cia sÃ£o perfeitos para qualquer ocasiÃ£o!\",\n    date: \"05 de Setembro, 2025\",\n    avatar: \"LF\"\n  },\n  {\n    id: 6,\n    name: \"Pedro Almeida\",\n    rating: 4,\n    comment: \"Ingredientes de qualidade e sabor incrÃ­vel. O cupcake de coco Ã© o meu favorito. Continuem assim!\",\n    date: \"03 de Setembro, 2025\",\n    avatar: \"PA\"\n  }\n];\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-r from-background via-accent to-secondary/20 py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col lg:flex-row items-center\">\n            <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n              <h1 className=\"text-5xl lg:text-6xl font-serif font-bold text-foreground mb-6\" data-testid=\"text-hero-title\">\n                Crie Sua Conta e Descubra os Melhores <span className=\"text-primary\">Cupcakes</span> do Brasil\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\" data-testid=\"text-hero-description\">\n                Cadastre-se gratuitamente e tenha acesso a sabores Ãºnicos, ofertas exclusivas e entrega rÃ¡pida direto na sua casa.\n              </p>\n              \n              {/* Benefits List */}\n              <div className=\"mb-8 space-y-3\">\n                <div className=\"flex items-center space-x-3 text-lg\" data-testid=\"benefit-catalog\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-bold\">â</div>\n                  <span className=\"text-foreground\">CatÃ¡logo completo com mais de 50 sabores</span>\n                </div>\n                <div className=\"flex items-center space-x-3 text-lg\" data-testid=\"benefit-offers\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-bold\">â</div>\n                  <span className=\"text-foreground\">Ofertas exclusivas para membros</span>\n                </div>\n                <div className=\"flex items-center space-x-3 text-lg\" data-testid=\"benefit-history\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-bold\">â</div>\n                  <span className=\"text-foreground\">HistÃ³rico de pedidos e favoritos</span>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button asChild size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-3\">\n                  <a href=\"/api/login\" data-testid=\"button-hero-register\">\n                    ð Criar Conta\n                  </a>\n                </Button>\n                <Button asChild variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-3\">\n                  <a href=\"/api/login\" data-testid=\"button-hero-login\">\n                    JÃ¡ tenho conta\n                  </a>\n                </Button>\n              </div>\n            </div>\n            <div className=\"lg:w-1/2 lg:pl-12\">\n              <img \n                src=\"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Cupcakes coloridos\" \n                className=\"rounded-3xl shadow-2xl w-full h-auto\"\n                data-testid=\"img-hero-cupcakes\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Reviews Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"text-reviews-title\">\n              AvaliaÃ§Ãµes\n            </h2>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"text-reviews-description\">\n              O que nossos clientes dizem sobre nossos cupcakes\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {customerReviews.map((review) => (\n              <div key={review.id} className=\"bg-card rounded-2xl p-6 shadow-lg border border-border\" data-testid={`review-${review.id}`}>\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-semibold mr-4\" data-testid={`avatar-${review.id}`}>\n                    {review.avatar}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-foreground\" data-testid={`name-${review.id}`}>{review.name}</h3>\n                    <div className=\"flex items-center\" data-testid={`rating-${review.id}`}>\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <Star\n                          key={i}\n                          className={`w-4 h-4 ${\n                            i < review.rating ? \"text-yellow-400 fill-yellow-400\" : \"text-gray-300\"\n                          }`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground mb-4 leading-relaxed\" data-testid={`comment-${review.id}`}>\n                  \"{review.comment}\"\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid={`date-${review.id}`}>\n                  {review.date}\n                </p>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button asChild size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              <a href=\"/api/login\" data-testid=\"button-reviews-register\">\n                Cadastre-se e Experimente\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-card\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"text-features-title\">\n              O que vocÃª ganha ao se cadastrar?\n            </h2>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"text-features-description\">\n              BenefÃ­cios exclusivos para nossos membros cadastrados\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6 bg-accent/30 rounded-2xl\" data-testid=\"feature-exclusive\">\n              <div className=\"text-6xl mb-4\">ð</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">Ofertas Exclusivas</h3>\n              <p className=\"text-muted-foreground\">Descontos especiais, promoÃ§Ãµes antecipadas e brindes surpresa apenas para membros.</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-accent/30 rounded-2xl\" data-testid=\"feature-personalized\">\n              <div className=\"text-6xl mb-4\">ð</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">ExperiÃªncia Personalizada</h3>\n              <p className=\"text-muted-foreground\">RecomendaÃ§Ãµes baseadas nos seus gostos, histÃ³rico de compras e lista de favoritos.</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-accent/30 rounded-2xl\" data-testid=\"feature-priority\">\n              <div className=\"text-6xl mb-4\">â¡</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">Atendimento PrioritÃ¡rio</h3>\n              <p className=\"text-muted-foreground\">Suporte dedicado, pedidos prioritÃ¡rios e acompanhamento em tempo real das entregas.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-serif font-bold text-foreground mb-6\" data-testid=\"text-cta-title\">\n            Comece Agora - Ã GrÃ¡tis!\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-cta-description\">\n            Mais de 10.000 clientes jÃ¡ se cadastraram. Junte-se a eles e tenha acesso a todo nosso catÃ¡logo de sabores Ãºnicos.\n          </p>\n          <div className=\"flex flex-col items-center gap-4\">\n            <Button asChild size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-3\">\n              <a href=\"/api/login\" data-testid=\"button-cta-register\">\n                â¨ Criar Conta\n              </a>\n            </Button>\n            <p className=\"text-sm text-muted-foreground\">ð¯ Sem taxas â¢ ð 100% seguro â¢ ð Acesso imediato</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":10417},"client/src/pages/ProductDetail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Minus, \n  Plus, \n  Heart, \n  Star, \n  Truck, \n  Award, \n  Snowflake,\n  ChevronLeft \n} from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const { isAuthenticated } = useAuth();\n  const { addToCart } = useCart();\n  const queryClient = useQueryClient();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: [\"/api/products\", id],\n    enabled: !!id,\n  });\n\n  const { data: favorites } = useQuery({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  const isFavorite = favorites?.some((fav: any) => fav.productId === id);\n\n  const favoriteMutation = useMutation({\n    mutationFn: async () => {\n      if (isFavorite) {\n        await apiRequest(\"DELETE\", `/api/favorites/${id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { productId: id });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\"] });\n      toast({\n        title: isFavorite ? \"Removido dos favoritos\" : \"Adicionado aos favoritos\",\n        description: isFavorite \n          ? \"Produto removido da sua lista de favoritos\" \n          : \"Produto adicionado Ã  sua lista de favoritos\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Login necessÃ¡rio\",\n          description: \"FaÃ§a login para gerenciar seus favoritos\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"NÃ£o foi possÃ­vel atualizar os favoritos\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mock additional images for demonstration\n  const productImages = product ? [\n    product.imageUrl,\n    \"https://images.unsplash.com/photo-1614707267537-b85aaf00c4b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n    \"https://images.unsplash.com/photo-1599599810769-bcde5a160d32?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\",\n    \"https://images.unsplash.com/photo-1576618148400-f54bed99fcfd?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n  ] : [];\n\n  const handleAddToCart = () => {\n    if (!product) return;\n    addToCart(product.id, quantity);\n  };\n\n  const handleToggleFavorite = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para gerenciar seus favoritos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    favoriteMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Skeleton className=\"h-6 w-64 mb-8\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          <div className=\"space-y-4\">\n            <Skeleton className=\"w-full h-96 rounded-3xl\" />\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Skeleton className=\"h-24 rounded-xl\" />\n              <Skeleton className=\"h-24 rounded-xl\" />\n              <Skeleton className=\"h-24 rounded-xl\" />\n            </div>\n          </div>\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-12 w-3/4\" />\n            <Skeleton className=\"h-6 w-1/2\" />\n            <Skeleton className=\"h-8 w-32\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-48 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\" data-testid=\"text-product-not-found\">\n          <div className=\"text-6xl mb-4\">ð</div>\n          <h2 className=\"text-2xl font-serif font-bold text-foreground mb-4\">\n            Produto nÃ£o encontrado\n          </h2>\n          <p className=\"text-muted-foreground mb-8\">\n            O produto que vocÃª estÃ¡ procurando nÃ£o existe ou foi removido.\n          </p>\n          <Link href=\"/catalog\" data-testid=\"link-back-catalog\">\n            <Button>Voltar ao CatÃ¡logo</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Breadcrumb */}\n      <nav className=\"flex items-center space-x-2 text-sm text-muted-foreground mb-8\" data-testid=\"breadcrumb\">\n        <Link href=\"/\" className=\"hover:text-primary\">InÃ­cio</Link>\n        <span>/</span>\n        <Link href=\"/catalog\" className=\"hover:text-primary\">CatÃ¡logo</Link>\n        <span>/</span>\n        <span className=\"text-foreground\">{product.name}</span>\n      </nav>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n        {/* Product Images */}\n        <div className=\"space-y-4\">\n          <div className=\"bg-card rounded-3xl overflow-hidden shadow-lg\">\n            <img \n              src={productImages[selectedImage]} \n              alt={product.name}\n              className=\"w-full h-96 object-cover\"\n              data-testid=\"img-product-main\"\n            />\n          </div>\n          <div className=\"grid grid-cols-4 gap-4\">\n            {productImages.map((image, index) => (\n              <img\n                key={index}\n                src={image}\n                alt={`${product.name} - Vista ${index + 1}`}\n                className={`w-full h-20 object-cover rounded-xl cursor-pointer transition-opacity ${\n                  selectedImage === index ? \"ring-2 ring-primary\" : \"hover:opacity-80\"\n                }`}\n                onClick={() => setSelectedImage(index)}\n                data-testid={`img-thumbnail-${index}`}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Product Info */}\n        <div className=\"space-y-6\">\n          <div>\n            <div className=\"flex items-start justify-between mb-2\">\n              <h1 className=\"text-4xl font-serif font-bold text-foreground\" data-testid=\"text-product-name\">\n                {product.name}\n              </h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleToggleFavorite}\n                disabled={favoriteMutation.isPending}\n                className=\"flex-shrink-0\"\n                data-testid=\"button-toggle-favorite\"\n              >\n                <Heart \n                  className={`h-6 w-6 transition-colors ${\n                    isFavorite ? \"fill-red-500 text-red-500\" : \"text-muted-foreground hover:text-red-500\"\n                  }`} \n                />\n              </Button>\n            </div>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"text-product-subtitle\">\n              Delicioso cupcake artesanal\n            </p>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-3xl font-bold text-primary\" data-testid=\"text-product-price\">\n              R$ {parseFloat(product.price).toFixed(2).replace('.', ',')}\n            </span>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"flex space-x-1\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"w-5 h-5 fill-yellow-400 text-yellow-400\" />\n                ))}\n              </div>\n              <span className=\"text-muted-foreground text-sm\">(127 avaliaÃ§Ãµes)</span>\n            </div>\n            {product.isFeatured && (\n              <Badge variant=\"secondary\" data-testid=\"badge-featured\">\n                Destaque\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"bg-card p-6 rounded-2xl\">\n            <h3 className=\"font-serif font-bold text-foreground mb-3\">DescriÃ§Ã£o</h3>\n            <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-product-description\">\n              {product.description}\n            </p>\n          </div>\n\n          {product.ingredients && product.ingredients.length > 0 && (\n            <div className=\"bg-card p-6 rounded-2xl\">\n              <h3 className=\"font-serif font-bold text-foreground mb-3\">Ingredientes</h3>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                {product.ingredients.map((ingredient, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\" data-testid={`ingredient-${index}`}>\n                    <span className=\"text-primary\">â¢</span>\n                    <span className=\"text-muted-foreground\">{ingredient}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-accent p-6 rounded-2xl border border-border\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <span className=\"font-medium text-foreground\">Quantidade</span>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  disabled={quantity <= 1}\n                  data-testid=\"button-decrease-quantity\"\n                >\n                  <Minus className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"text-xl font-medium px-4\" data-testid=\"text-quantity\">\n                  {quantity}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => setQuantity(quantity + 1)}\n                  data-testid=\"button-increase-quantity\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <Button \n                className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\" \n                size=\"lg\"\n                onClick={handleAddToCart}\n                data-testid=\"button-add-to-cart\"\n              >\n                Adicionar ao Carrinho - R$ {(parseFloat(product.price) * quantity).toFixed(2).replace('.', ',')}\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div className=\"bg-card p-4 rounded-xl\" data-testid=\"feature-delivery\">\n              <Truck className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-sm font-medium\">Entrega RÃ¡pida</div>\n              <div className=\"text-xs text-muted-foreground\">1-2 horas</div>\n            </div>\n            <div className=\"bg-card p-4 rounded-xl\" data-testid=\"feature-quality\">\n              <Award className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-sm font-medium\">Qualidade</div>\n              <div className=\"text-xs text-muted-foreground\">Ingredientes premium</div>\n            </div>\n            <div className=\"bg-card p-4 rounded-xl\" data-testid=\"feature-fresh\">\n              <Snowflake className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-sm font-medium\">Sempre Fresco</div>\n              <div className=\"text-xs text-muted-foreground\">Feito sob demanda</div>\n            </div>\n          </div>\n\n          <Link href=\"/catalog\" className=\"inline-flex\" data-testid=\"link-back-catalog\">\n            <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n              <ChevronLeft className=\"h-4 w-4 mr-2\" />\n              Voltar ao CatÃ¡logo\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12236},"client/src/pages/Profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { \n  User as UserIcon, \n  FileText, \n  MapPin, \n  Heart, \n  Package, \n  Star,\n  LogOut,\n  Plus,\n  Pencil,\n  Trash2,\n  Home\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User, Order, Favorite, Address } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n\n  // Address form state\n  const [isAddressDialogOpen, setIsAddressDialogOpen] = useState(false);\n  const [editingAddress, setEditingAddress] = useState<Address | null>(null);\n  const [addressForm, setAddressForm] = useState({\n    name: \"\",\n    cep: \"\",\n    street: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    state: \"\"\n  });\n  const [setAsDefault, setSetAsDefault] = useState(false);\n  const [cepLoading, setCepLoading] = useState(false);\n  const [formErrors, setFormErrors] = useState<string[]>([]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: favorites, isLoading: favoritesLoading } = useQuery<Favorite[]>({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch user's saved addresses\n  const { data: addresses, isLoading: addressesLoading } = useQuery<Address[]>({\n    queryKey: [\"/api/addresses\"],\n    enabled: isAuthenticated,\n  });\n\n  const typedUser = user as User | undefined;\n\n  // CEP lookup\n  const handleCepLookup = async (cep: string) => {\n    if (!cep || cep.length < 8) {\n      setFormErrors([\"CEP deve conter 8 dÃ­gitos\"]);\n      return;\n    }\n\n    setCepLoading(true);\n    setFormErrors([]);\n\n    try {\n      const response = await fetch(`/api/cep/${cep.replace(/\\D/g, '')}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        setFormErrors([data.error || \"Erro ao consultar CEP\"]);\n        return;\n      }\n\n      setAddressForm(prev => ({\n        ...prev,\n        cep: data.cep,\n        street: data.street,\n        neighborhood: data.neighborhood,\n        city: data.city,\n        state: data.state\n      }));\n\n      toast({\n        title: \"CEP encontrado!\",\n        description: `${data.street}, ${data.neighborhood}, ${data.city}`,\n      });\n    } catch (error) {\n      setFormErrors([\"Erro ao consultar CEP\"]);\n    } finally {\n      setCepLoading(false);\n    }\n  };\n\n  // Create address mutation\n  const createAddressMutation = useMutation({\n    mutationFn: async (addressData: any) => {\n      return await apiRequest(\"POST\", \"/api/addresses\", addressData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/addresses\"] });\n      setIsAddressDialogOpen(false);\n      clearAddressForm();\n      toast({\n        title: \"EndereÃ§o criado\",\n        description: \"EndereÃ§o salvo com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      setFormErrors([error.message || \"Erro ao criar endereÃ§o\"]);\n    }\n  });\n\n  // Update address mutation\n  const updateAddressMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/addresses/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/addresses\"] });\n      setIsAddressDialogOpen(false);\n      clearAddressForm();\n      setEditingAddress(null);\n      toast({\n        title: \"EndereÃ§o atualizado\",\n        description: \"EndereÃ§o atualizado com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      setFormErrors([error.message || \"Erro ao atualizar endereÃ§o\"]);\n    }\n  });\n\n  // Delete address mutation\n  const deleteAddressMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/addresses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/addresses\"] });\n      toast({\n        title: \"EndereÃ§o removido\",\n        description: \"EndereÃ§o removido com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao remover endereÃ§o\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Set default address mutation\n  const setDefaultMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PUT\", `/api/addresses/${id}/default`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/addresses\"] });\n      toast({\n        title: \"EndereÃ§o padrÃ£o\",\n        description: \"EndereÃ§o definido como padrÃ£o\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao definir endereÃ§o padrÃ£o\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const clearAddressForm = () => {\n    setAddressForm({\n      name: \"\",\n      cep: \"\",\n      street: \"\",\n      number: \"\",\n      complement: \"\",\n      neighborhood: \"\",\n      city: \"\",\n      state: \"\"\n    });\n    setSetAsDefault(false);\n    setFormErrors([]);\n    setEditingAddress(null);\n  };\n\n  const handleEditAddress = (address: Address) => {\n    setEditingAddress(address);\n    setAddressForm({\n      name: address.name,\n      cep: address.cep,\n      street: address.street,\n      number: address.number,\n      complement: address.complement || \"\",\n      neighborhood: address.neighborhood,\n      city: address.city,\n      state: address.state\n    });\n    setSetAsDefault(address.isDefault || false);\n    setIsAddressDialogOpen(true);\n  };\n\n  const handleSubmitAddress = () => {\n    // Validate form\n    const errors: string[] = [];\n    if (!addressForm.name.trim()) errors.push(\"Nome Ã© obrigatÃ³rio\");\n    if (!addressForm.cep.trim()) errors.push(\"CEP Ã© obrigatÃ³rio\");\n    if (!addressForm.street.trim()) errors.push(\"Rua Ã© obrigatÃ³ria\");\n    if (!addressForm.number.trim()) errors.push(\"NÃºmero Ã© obrigatÃ³rio\");\n    if (!addressForm.neighborhood.trim()) errors.push(\"Bairro Ã© obrigatÃ³rio\");\n    if (!addressForm.city.trim()) errors.push(\"Cidade Ã© obrigatÃ³ria\");\n    if (!addressForm.state.trim()) errors.push(\"Estado Ã© obrigatÃ³rio\");\n\n    if (errors.length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n\n    const addressData = {\n      name: addressForm.name,\n      cep: addressForm.cep.replace(/\\D/g, ''),\n      street: addressForm.street,\n      number: addressForm.number,\n      complement: addressForm.complement,\n      neighborhood: addressForm.neighborhood,\n      city: addressForm.city,\n      state: addressForm.state.toUpperCase(),\n      // Use checkbox value, but for first address default to true if checkbox is not explicitly set\n      isDefault: editingAddress \n        ? setAsDefault \n        : setAsDefault || (addresses?.length === 0 || !addresses)\n    };\n\n    if (editingAddress) {\n      updateAddressMutation.mutate({ id: editingAddress.id, data: addressData });\n    } else {\n      createAddressMutation.mutate(addressData);\n    }\n  };\n\n  const handleDeleteAddress = (id: string) => {\n    if (confirm(\"Tem certeza que deseja remover este endereÃ§o?\")) {\n      deleteAddressMutation.mutate(id);\n    }\n  };\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para acessar seu perfil\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Skeleton className=\"h-12 w-48 mb-8\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-64 rounded-2xl\" />\n              <Skeleton className=\"h-48 rounded-2xl\" />\n            </div>\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Skeleton className=\"h-32 rounded-2xl\" />\n              <Skeleton className=\"h-48 rounded-2xl\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return (first + last).toUpperCase() || 'U';\n  };\n\n  const formatOrderStatus = (status: string) => {\n    const statusMap: Record<string, { label: string; variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\" }> = {\n      pending: { label: \"Pendente\", variant: \"outline\" },\n      confirmed: { label: \"Confirmado\", variant: \"secondary\" },\n      preparing: { label: \"Em Preparo\", variant: \"default\" },\n      ready: { label: \"Pronto\", variant: \"secondary\" },\n      delivered: { label: \"Entregue\", variant: \"default\" },\n      cancelled: { label: \"Cancelado\", variant: \"destructive\" },\n    };\n    return statusMap[status] || { label: status, variant: \"outline\" as const };\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-serif font-bold text-foreground mb-8\" data-testid=\"text-profile-title\">\n          Meu Perfil\n        </h1>\n\n        <div className=\"flex flex-col lg:grid lg:grid-cols-3 gap-8\">\n          {/* Profile Sidebar - Mobile optimized */}\n          <div className=\"lg:space-y-6\">\n            <div className=\"bg-card rounded-2xl p-4 lg:p-6 text-center shadow-lg\">\n              <div className=\"flex flex-col sm:flex-row lg:flex-col items-center gap-4\">\n                <div className=\"w-16 h-16 sm:w-20 sm:h-20 lg:w-24 lg:h-24 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-lg sm:text-2xl lg:text-3xl font-bold\" data-testid=\"avatar-initials\">\n                  {getInitials(typedUser?.firstName, typedUser?.lastName)}\n                </div>\n                <div className=\"text-center sm:text-left lg:text-center flex-1\">\n                  <h2 className=\"text-lg sm:text-xl font-serif font-bold text-foreground mb-1 lg:mb-2\" data-testid=\"text-user-name\">\n                    {typedUser?.firstName && typedUser?.lastName \n                      ? `${typedUser.firstName} ${typedUser.lastName}`\n                      : typedUser?.email || 'UsuÃ¡rio'\n                    }\n                  </h2>\n                  <p className=\"text-sm text-muted-foreground mb-2 lg:mb-4\" data-testid=\"text-user-email\">\n                    {typedUser?.email}\n                  </p>\n                  <div className=\"flex items-center justify-center sm:justify-start lg:justify-center space-x-6 text-sm\">\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-primary\" data-testid=\"text-total-orders\">\n                        {orders?.length || 0}\n                      </div>\n                      <div className=\"text-muted-foreground\">Pedidos</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-primary\" data-testid=\"text-total-favorites\">\n                        {favorites?.length || 0}\n                      </div>\n                      <div className=\"text-muted-foreground\">Favoritos</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-2xl p-4 lg:p-6 shadow-lg\">\n              <h3 className=\"font-serif font-bold text-foreground mb-4 hidden lg:block\">Menu</h3>\n              <nav className=\"flex lg:flex-col gap-2 overflow-x-auto lg:overflow-x-visible pb-2 lg:pb-0\">\n                <button \n                  onClick={() => document.getElementById('personal-data')?.scrollIntoView({ behavior: 'smooth', block: 'start' })}\n                  className=\"flex items-center space-x-2 p-3 rounded-xl hover:bg-accent transition-colors text-muted-foreground cursor-pointer whitespace-nowrap lg:w-full text-left\"\n                  data-testid=\"nav-personal-data\"\n                >\n                  <UserIcon className=\"w-5 h-5\" />\n                  <span className=\"hidden sm:inline\">Dados Pessoais</span>\n                  <span className=\"sm:hidden\">Dados</span>\n                </button>\n                <button \n                  onClick={() => document.getElementById('orders')?.scrollIntoView({ behavior: 'smooth', block: 'start' })}\n                  className=\"flex items-center space-x-2 p-3 rounded-xl hover:bg-accent transition-colors text-muted-foreground cursor-pointer whitespace-nowrap lg:w-full text-left\"\n                  data-testid=\"nav-orders\"\n                >\n                  <FileText className=\"w-5 h-5\" />\n                  <span className=\"hidden sm:inline\">HistÃ³rico de Pedidos</span>\n                  <span className=\"sm:hidden\">Pedidos</span>\n                </button>\n                <button \n                  onClick={() => document.getElementById('addresses')?.scrollIntoView({ behavior: 'smooth', block: 'start' })}\n                  className=\"flex items-center space-x-2 p-3 rounded-xl hover:bg-accent transition-colors text-muted-foreground cursor-pointer whitespace-nowrap lg:w-full text-left\"\n                  data-testid=\"nav-addresses\"\n                >\n                  <MapPin className=\"w-5 h-5\" />\n                  <span>EndereÃ§os</span>\n                </button>\n                <button \n                  onClick={() => document.getElementById('favorites')?.scrollIntoView({ behavior: 'smooth', block: 'start' })}\n                  className=\"flex items-center space-x-2 p-3 rounded-xl hover:bg-accent transition-colors text-muted-foreground cursor-pointer whitespace-nowrap lg:w-full text-left\"\n                  data-testid=\"nav-favorites\"\n                >\n                  <Heart className=\"w-5 h-5\" />\n                  <span>Favoritos</span>\n                </button>\n                <a \n                  href=\"/api/logout\" \n                  className=\"flex items-center space-x-2 p-3 rounded-xl hover:bg-destructive/10 transition-colors text-destructive cursor-pointer whitespace-nowrap\"\n                  data-testid=\"link-logout\"\n                >\n                  <LogOut className=\"w-5 h-5\" />\n                  <span>Sair</span>\n                </a>\n              </nav>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Personal Data Section */}\n            <div id=\"personal-data\" className=\"bg-card rounded-2xl p-4 lg:p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-4 lg:mb-6\">\n                <h3 className=\"text-lg lg:text-xl font-serif font-bold text-foreground\">Dados Pessoais</h3>\n                <Button variant=\"ghost\" className=\"text-primary hover:underline text-sm lg:text-base\" data-testid=\"button-edit-profile\">\n                  Editar\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 lg:gap-6\">\n                <div>\n                  <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-foreground mb-2\">\n                    Nome\n                  </Label>\n                  <Input \n                    id=\"firstName\"\n                    value={typedUser?.firstName || ''} \n                    readOnly\n                    className=\"bg-input\"\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-foreground mb-2\">\n                    Sobrenome\n                  </Label>\n                  <Input \n                    id=\"lastName\"\n                    value={typedUser?.lastName || ''} \n                    readOnly\n                    className=\"bg-input\"\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground mb-2\">\n                    E-mail\n                  </Label>\n                  <Input \n                    id=\"email\"\n                    value={typedUser?.email || ''} \n                    readOnly\n                    className=\"bg-input\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground mb-2\">\n                    Telefone\n                  </Label>\n                  <Input \n                    id=\"phone\"\n                    value={typedUser?.phone || ''} \n                    readOnly\n                    className=\"bg-input\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Orders Section */}\n            <div id=\"orders\" className=\"bg-card rounded-2xl p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-serif font-bold text-foreground\">HistÃ³rico de Pedidos</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {ordersLoading ? (\n                  Array.from({ length: 3 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full rounded-xl\" />\n                  ))\n                ) : orders && orders.length > 0 ? (\n                  orders.slice(0, 3).map((order: any) => {\n                    const statusInfo = formatOrderStatus(order.status);\n                    return (\n                      <Link \n                        key={order.id} \n                        href={`/order/${order.id}`}\n                        className=\"block\"\n                        data-testid={`link-order-${order.id}`}\n                      >\n                        <div \n                          className=\"border border-border rounded-xl p-4 hover:bg-accent transition-colors cursor-pointer\"\n                          data-testid={`order-${order.id}`}\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center space-x-3\">\n                              <span className=\"text-sm font-medium text-foreground\">\n                                Pedido #{order.id.slice(-8)}\n                              </span>\n                              <Badge variant={statusInfo.variant} className=\"text-xs\">\n                                {statusInfo.label}\n                              </Badge>\n                            </div>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {order.createdAt ? new Date(order.createdAt).toLocaleDateString('pt-BR') : 'Data nÃ£o disponÃ­vel'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              Total do pedido\n                            </div>\n                            <span className=\"font-bold text-primary\">\n                              R$ {parseFloat(order.total).toFixed(2).replace('.', ',')}\n                            </span>\n                          </div>\n                        </div>\n                      </Link>\n                    );\n                  })\n                ) : (\n                  <div className=\"text-center py-8\" data-testid=\"no-orders\">\n                    <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">VocÃª ainda nÃ£o fez nenhum pedido.</p>\n                    <Link href=\"/catalog\" className=\"inline-block mt-4\">\n                      <Button variant=\"outline\" data-testid=\"button-start-shopping\">\n                        ComeÃ§ar a Comprar\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n                {orders && orders.length > 3 && (\n                  <div className=\"text-center pt-4\">\n                    <Link href=\"/orders\">\n                      <Button variant=\"outline\" data-testid=\"button-view-all-orders\">\n                        Ver todos os pedidos\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Addresses Section */}\n            <div id=\"addresses\" className=\"bg-card rounded-2xl p-4 lg:p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-4 lg:mb-6\">\n                <h3 className=\"text-lg lg:text-xl font-serif font-bold text-foreground\">Meus EndereÃ§os</h3>\n              </div>\n\n              {addressesLoading ? (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 lg:gap-6\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-48 w-full rounded-lg\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 lg:gap-6\">\n                  {/* Add new address card */}\n                  <Dialog open={isAddressDialogOpen} onOpenChange={(open) => {\n                    setIsAddressDialogOpen(open);\n                    if (!open) {\n                      clearAddressForm();\n                    }\n                  }}>\n                    <DialogTrigger asChild>\n                      <Card className=\"border-2 border-dashed border-primary/30 hover:border-primary/50 transition-colors cursor-pointer\" data-testid=\"card-add-address\">\n                        <CardContent className=\"flex flex-col items-center justify-center h-48 text-center\">\n                          <Plus className=\"h-12 w-12 text-primary/50 mb-4\" />\n                          <p className=\"text-foreground font-medium\">Adicionar EndereÃ§o</p>\n                          <p className=\"text-sm text-muted-foreground\">Clique para criar um novo endereÃ§o</p>\n                        </CardContent>\n                      </Card>\n                    </DialogTrigger>\n                    <DialogContent className=\"w-[95vw] max-w-md mx-auto max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-5 w-5\" />\n                          {editingAddress ? \"Editar EndereÃ§o\" : \"Novo EndereÃ§o\"}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4 px-1\">\n                        <div>\n                          <Label htmlFor=\"name\">Nome do EndereÃ§o *</Label>\n                          <Input\n                            id=\"name\"\n                            placeholder=\"Casa, Trabalho, etc.\"\n                            value={addressForm.name}\n                            onChange={(e) => setAddressForm(prev => ({ ...prev, name: e.target.value }))}\n                            data-testid=\"input-address-name\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"cep\">CEP *</Label>\n                          <div className=\"flex gap-2\">\n                            <Input\n                              id=\"cep\"\n                              placeholder=\"00000-000\"\n                              value={addressForm.cep}\n                              onChange={(e) => {\n                                const value = e.target.value.replace(/\\D/g, '').replace(/(\\d{5})(\\d)/, '$1-$2');\n                                setAddressForm(prev => ({ ...prev, cep: value }));\n                              }}\n                              onBlur={() => addressForm.cep && handleCepLookup(addressForm.cep)}\n                              maxLength={9}\n                              data-testid=\"input-cep\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => handleCepLookup(addressForm.cep)}\n                              disabled={cepLoading || !addressForm.cep}\n                              data-testid=\"button-search-cep\"\n                            >\n                              {cepLoading ? \"...\" : \"Buscar\"}\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                          <div className=\"md:col-span-2\">\n                            <Label htmlFor=\"street\">Logradouro *</Label>\n                            <Input\n                              id=\"street\"\n                              placeholder=\"Rua, Avenida, etc.\"\n                              value={addressForm.street}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, street: e.target.value }))}\n                              data-testid=\"input-street\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"number\">NÃºmero *</Label>\n                            <Input\n                              id=\"number\"\n                              placeholder=\"123\"\n                              value={addressForm.number}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, number: e.target.value }))}\n                              data-testid=\"input-number\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"complement\">Complemento</Label>\n                            <Input\n                              id=\"complement\"\n                              placeholder=\"Apt 45, Bloco B, etc.\"\n                              value={addressForm.complement}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, complement: e.target.value }))}\n                              data-testid=\"input-complement\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"neighborhood\">Bairro *</Label>\n                            <Input\n                              id=\"neighborhood\"\n                              placeholder=\"Nome do bairro\"\n                              value={addressForm.neighborhood}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, neighborhood: e.target.value }))}\n                              data-testid=\"input-neighborhood\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"city\">Cidade *</Label>\n                            <Input\n                              id=\"city\"\n                              placeholder=\"Nome da cidade\"\n                              value={addressForm.city}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, city: e.target.value }))}\n                              data-testid=\"input-city\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"state\">Estado *</Label>\n                            <Input\n                              id=\"state\"\n                              placeholder=\"UF\"\n                              value={addressForm.state}\n                              onChange={(e) => setAddressForm(prev => ({ ...prev, state: e.target.value.toUpperCase() }))}\n                              maxLength={2}\n                              data-testid=\"input-state\"\n                            />\n                          </div>\n                        </div>\n\n                        {formErrors.length > 0 && (\n                          <div className=\"text-sm text-red-600\" data-testid=\"text-form-errors\">\n                            {formErrors.map((error, index) => (\n                              <p key={index}>{error}</p>\n                            ))}\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox \n                            id=\"setAsDefault\"\n                            checked={setAsDefault}\n                            onCheckedChange={setSetAsDefault}\n                            data-testid=\"checkbox-set-default\"\n                          />\n                          <Label htmlFor=\"setAsDefault\" className=\"text-sm cursor-pointer\">\n                            Definir como endereÃ§o padrÃ£o\n                          </Label>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => setIsAddressDialogOpen(false)}\n                            className=\"flex-1\"\n                            data-testid=\"button-cancel\"\n                          >\n                            Cancelar\n                          </Button>\n                          <Button \n                            onClick={handleSubmitAddress}\n                            disabled={createAddressMutation.isPending || updateAddressMutation.isPending}\n                            className=\"flex-1\"\n                            data-testid=\"button-save-address\"\n                          >\n                            {(createAddressMutation.isPending || updateAddressMutation.isPending) ? \"Salvando...\" : \n                             editingAddress ? \"Atualizar\" : \"Salvar\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n\n                  {/* Address cards */}\n                  {addresses?.map((address) => (\n                    <Card key={address.id} className={`relative ${address.isDefault ? 'ring-2 ring-primary' : ''}`} data-testid={`card-address-${address.id}`}>\n                      <CardHeader className=\"pb-2 lg:pb-3 p-3 lg:p-6\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"flex items-center gap-2 text-base lg:text-lg\">\n                              <Home className=\"h-4 w-4\" />\n                              {address.name}\n                            </CardTitle>\n                            {address.isDefault && (\n                              <Badge variant=\"default\" className=\"mt-1 text-xs\" data-testid={`badge-default-${address.id}`}>\n                                <Star className=\"h-3 w-3 mr-1\" />\n                                PadrÃ£o\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3 p-3 lg:p-6 pt-0\">\n                        <div className=\"text-xs lg:text-sm text-muted-foreground\">\n                          <p className=\"break-words\">{address.street}, {address.number}</p>\n                          {address.complement && <p className=\"break-words\">{address.complement}</p>}\n                          <p>{address.neighborhood}</p>\n                          <p>{address.city} - {address.state}</p>\n                          <p>CEP: {address.cep}</p>\n                        </div>\n                        \n                        <div className=\"flex flex-wrap gap-2 pt-3\">\n                          {!address.isDefault && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setDefaultMutation.mutate(address.id)}\n                              disabled={setDefaultMutation.isPending}\n                              className=\"flex-1 min-w-fit h-9 text-xs\"\n                              data-testid={`button-set-default-${address.id}`}\n                            >\n                              <Star className=\"h-3 w-3 mr-1\" />\n                              Definir padrÃ£o\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditAddress(address)}\n                            className=\"flex-1 min-w-fit h-9 text-xs\"\n                            data-testid={`button-edit-${address.id}`}\n                          >\n                            <Pencil className=\"h-3 w-3 mr-1\" />\n                            Editar\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteAddress(address.id)}\n                            disabled={deleteAddressMutation.isPending}\n                            className=\"flex-1 min-w-fit h-9 text-xs\"\n                            data-testid={`button-delete-${address.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3 mr-1\" />\n                            Remover\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {addresses && addresses.length === 0 && !addressesLoading && (\n                <div className=\"text-center py-8 lg:py-16\" data-testid=\"empty-addresses\">\n                  <MapPin className=\"h-16 w-16 lg:h-24 lg:w-24 mx-auto text-muted-foreground mb-4 lg:mb-6\" />\n                  <h2 className=\"text-xl lg:text-2xl font-serif font-bold text-foreground mb-3 lg:mb-4\">\n                    Nenhum endereÃ§o cadastrado\n                  </h2>\n                  <p className=\"text-muted-foreground mb-6 lg:mb-8\">\n                    Adicione um endereÃ§o para facilitar seus pedidos futuros\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Favorites Section */}\n            <div id=\"favorites\" className=\"bg-card rounded-2xl p-4 lg:p-6 shadow-lg\">\n              <h3 className=\"text-lg lg:text-xl font-serif font-bold text-foreground mb-4 lg:mb-6\">Produtos Favoritos</h3>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {favoritesLoading ? (\n                  Array.from({ length: 4 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-24 w-full rounded-xl\" />\n                  ))\n                ) : favorites && favorites.length > 0 ? (\n                  favorites.slice(0, 4).map((favorite: any) => (\n                    <Link \n                      key={favorite.id} \n                      href={`/product/${favorite.product.id}`}\n                      className=\"block\"\n                      data-testid={`favorite-${favorite.product.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4 p-4 border border-border rounded-xl hover:bg-accent transition-colors cursor-pointer\">\n                        <img \n                          src={favorite.product.imageUrl} \n                          alt={favorite.product.name}\n                          className=\"w-16 h-16 object-cover rounded-xl\"\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">\n                            {favorite.product.name}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                            {favorite.product.description}\n                          </p>\n                          <span className=\"text-primary font-bold\">\n                            R$ {parseFloat(favorite.product.price).toFixed(2).replace('.', ',')}\n                          </span>\n                        </div>\n                      </div>\n                    </Link>\n                  ))\n                ) : (\n                  <div className=\"col-span-full text-center py-8\" data-testid=\"no-favorites\">\n                    <Heart className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">VocÃª nÃ£o tem produtos favoritos ainda.</p>\n                    <Link href=\"/catalog\" className=\"inline-block mt-4\">\n                      <Button variant=\"outline\" data-testid=\"button-browse-products\">\n                        Explorar Produtos\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </div>\n              {favorites && favorites.length > 4 && (\n                <div className=\"text-center pt-6\">\n                  <Button variant=\"outline\" data-testid=\"button-view-all-favorites\">\n                    Ver todos os favoritos\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":38498},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 hover:scale-105 active:scale-95\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1943},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  ShoppingCart, \n  Package, \n  Users, \n  DollarSign, \n  Eye,\n  Edit,\n  Trash2,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  Ban\n} from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\n\nexport default function Admin() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedTab, setSelectedTab] = useState(\"dashboard\");\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && (user as any)?.isAdmin,\n  });\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/admin/orders\"],\n    enabled: isAuthenticated && (user as any)?.isAdmin && selectedTab === \"orders\",\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: ({ orderId, status }: { orderId: string; status: string }) =>\n      apiRequest(`/api/admin/orders/${orderId}/status`, \"PUT\", { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Status do pedido atualizado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao atualizar status do pedido\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para acessar o painel administrativo\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    } else if (!authLoading && isAuthenticated && !(user as any)?.isAdmin) {\n      toast({\n        title: \"Acesso negado\",\n        description: \"VocÃª nÃ£o tem permissÃ£o para acessar esta pÃ¡gina\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n    }\n  }, [isAuthenticated, authLoading, (user as any)?.isAdmin, toast]);\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Skeleton className=\"h-12 w-64 mb-8\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-32 rounded-2xl\" />\n            ))}\n          </div>\n          <Skeleton className=\"h-96 rounded-2xl\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !(user as any)?.isAdmin) {\n    return null;\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    }).format(value);\n  };\n\n  const getOrderStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"h-4 w-4\" />;\n      case \"confirmed\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"preparing\":\n        return <Package className=\"h-4 w-4\" />;\n      case \"ready\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"delivered\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"cancelled\":\n        return <Ban className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getOrderStatusLabel = (status: string) => {\n    const statusMap: Record<string, string> = {\n      pending: \"Pendente\",\n      confirmed: \"Confirmado\",\n      preparing: \"Em Preparo\",\n      ready: \"Pronto\",\n      delivered: \"Entregue\",\n      cancelled: \"Cancelado\",\n    };\n    return statusMap[status] || status;\n  };\n\n  const getOrderStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case \"pending\":\n        return \"outline\";\n      case \"confirmed\":\n        return \"secondary\";\n      case \"preparing\":\n        return \"default\";\n      case \"ready\":\n        return \"secondary\";\n      case \"delivered\":\n        return \"default\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex flex-col space-y-8\">\n          {/* Header */}\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n              Painel Administrativo\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Gerencie pedidos, produtos e visualize estatÃ­sticas da loja\n            </p>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex space-x-1 bg-muted p-1 rounded-lg w-fit\">\n            <Button\n              variant={selectedTab === \"dashboard\" ? \"default\" : \"ghost\"}\n              onClick={() => setSelectedTab(\"dashboard\")}\n              data-testid=\"tab-dashboard\"\n            >\n              Dashboard\n            </Button>\n            <Button\n              variant={selectedTab === \"orders\" ? \"default\" : \"ghost\"}\n              onClick={() => setSelectedTab(\"orders\")}\n              data-testid=\"tab-orders\"\n            >\n              Pedidos\n            </Button>\n            <Button\n              variant={selectedTab === \"products\" ? \"default\" : \"ghost\"}\n              onClick={() => setSelectedTab(\"products\")}\n              data-testid=\"tab-products\"\n            >\n              Produtos\n            </Button>\n          </div>\n\n          {/* Dashboard Tab */}\n          {selectedTab === \"dashboard\" && (\n            <div className=\"space-y-8\">\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n                      Total de Pedidos\n                    </CardTitle>\n                    <ShoppingCart className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-900 dark:text-blue-100\" data-testid=\"stat-orders\">\n                      {statsLoading ? <Skeleton className=\"h-8 w-16\" /> : (stats as any)?.totalOrders || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                      Receita Total\n                    </CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-900 dark:text-green-100\" data-testid=\"stat-revenue\">\n                      {statsLoading ? (\n                        <Skeleton className=\"h-8 w-24\" />\n                      ) : (\n                        formatCurrency((stats as any)?.totalRevenue || 0)\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                      Total de Produtos\n                    </CardTitle>\n                    <Package className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-purple-900 dark:text-purple-100\" data-testid=\"stat-products\">\n                      {statsLoading ? <Skeleton className=\"h-8 w-16\" /> : (stats as any)?.totalProducts || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">\n                      Total de UsuÃ¡rios\n                    </CardTitle>\n                    <Users className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-900 dark:text-orange-100\" data-testid=\"stat-users\">\n                      {statsLoading ? <Skeleton className=\"h-8 w-16\" /> : (stats as any)?.totalUsers || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* Orders Tab */}\n          {selectedTab === \"orders\" && (\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ShoppingCart className=\"h-5 w-5\" />\n                    Gerenciar Pedidos\n                  </CardTitle>\n                  <CardDescription>\n                    Visualize e gerencie todos os pedidos da loja\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {ordersLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <Skeleton key={i} className=\"h-16 w-full\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Pedido</TableHead>\n                          <TableHead>Cliente</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Total</TableHead>\n                          <TableHead>Data</TableHead>\n                          <TableHead>AÃ§Ãµes</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {(orders as any)?.map((order: any) => (\n                          <TableRow key={order.id}>\n                            <TableCell className=\"font-mono text-sm\" data-testid={`order-id-${order.id}`}>\n                              {order.id.slice(0, 8)}...\n                            </TableCell>\n                            <TableCell data-testid={`order-customer-${order.id}`}>\n                              {order.user?.firstName} {order.user?.lastName}\n                            </TableCell>\n                            <TableCell>\n                              <Badge\n                                variant={getOrderStatusVariant(order.status)}\n                                className=\"flex items-center gap-1 w-fit\"\n                                data-testid={`order-status-${order.id}`}\n                              >\n                                {getOrderStatusIcon(order.status)}\n                                {getOrderStatusLabel(order.status)}\n                              </Badge>\n                            </TableCell>\n                            <TableCell data-testid={`order-total-${order.id}`}>\n                              {formatCurrency(parseFloat(order.total))}\n                            </TableCell>\n                            <TableCell data-testid={`order-date-${order.id}`}>\n                              {new Date(order.createdAt).toLocaleDateString(\"pt-BR\")}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Select\n                                  value={order.status}\n                                  onValueChange={(newStatus) =>\n                                    updateOrderMutation.mutate({\n                                      orderId: order.id,\n                                      status: newStatus,\n                                    })\n                                  }\n                                  disabled={updateOrderMutation.isPending}\n                                >\n                                  <SelectTrigger className=\"w-40\" data-testid={`select-status-${order.id}`}>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"pending\">Pendente</SelectItem>\n                                    <SelectItem value=\"confirmed\">Confirmado</SelectItem>\n                                    <SelectItem value=\"preparing\">Em Preparo</SelectItem>\n                                    <SelectItem value=\"ready\">Pronto</SelectItem>\n                                    <SelectItem value=\"delivered\">Entregue</SelectItem>\n                                    <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Products Tab */}\n          {selectedTab === \"products\" && (\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5\" />\n                    Gerenciar Produtos\n                  </CardTitle>\n                  <CardDescription>\n                    Funcionalidade de gerenciamento de produtos em desenvolvimento\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    As funcionalidades de criaÃ§Ã£o, ediÃ§Ã£o e exclusÃ£o de produtos serÃ£o implementadas na prÃ³xima versÃ£o.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16089},"client/src/pages/About.tsx":{"content":"export default function About() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-16\">\n        <h1 className=\"text-5xl font-serif font-bold text-foreground mb-6\" data-testid=\"text-about-title\">\n          Sobre NÃ³s\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-about-subtitle\">\n          ConheÃ§a a histÃ³ria por trÃ¡s da Doce DelÃ­cia e descubra como nasceu nossa paixÃ£o pelos cupcakes mais deliciosos do Brasil.\n        </p>\n      </div>\n\n      {/* Story Sections */}\n      <div className=\"space-y-16\">\n        {/* Our Beginning */}\n        <section className=\"bg-card rounded-2xl p-8 shadow-lg\" data-testid=\"section-beginning\">\n          <div className=\"flex flex-col lg:flex-row items-center gap-8\">\n            <div className=\"lg:w-1/2\">\n              <div className=\"text-6xl mb-4\">ð§</div>\n              <h2 className=\"text-3xl font-serif font-bold text-foreground mb-4\">\n                O InÃ­cio de Tudo\n              </h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                A Doce DelÃ­cia nasceu em 2014 no coraÃ§Ã£o de SÃ£o Paulo, mais precisamente na Vila Madalena. \n                Tudo comeÃ§ou com Maria Santos, uma confeiteira apaixonada que decidiu transformar sua cozinha \n                em um pequeno ateliÃª de cupcakes artesanais.\n              </p>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Com apenas R$ 2.000 de investimento inicial e muita determinaÃ§Ã£o, Maria comeÃ§ou fazendo \n                encomendas para amigos e vizinhos, sempre priorizando ingredientes frescos e receitas \n                desenvolvidas com muito carinho.\n              </p>\n            </div>\n            <div className=\"lg:w-1/2\">\n              <img \n                src=\"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Cupcakes artesanais coloridos onde tudo comeÃ§ou\"\n                className=\"w-full h-80 object-cover rounded-2xl\"\n                data-testid=\"img-beginning\"\n              />\n            </div>\n          </div>\n        </section>\n\n        {/* Growth */}\n        <section className=\"bg-accent/20 rounded-2xl p-8\" data-testid=\"section-growth\">\n          <div className=\"flex flex-col lg:flex-row-reverse items-start gap-8\">\n            <div className=\"lg:w-1/2\">\n              <h2 className=\"text-3xl font-serif font-bold text-foreground mb-4\">\n                Crescimento e ExpansÃ£o\n              </h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                Em 2016, a demanda cresceu tanto que Maria precisou alugar o primeiro ponto comercial na \n                prÃ³pria Vila Madalena. Com uma equipe pequena mas dedicada, a Doce DelÃ­cia comeÃ§ou a \n                atender pedidos corporativos e eventos especiais.\n              </p>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                O grande salto veio em 2019 com o lanÃ§amento da nossa plataforma online, permitindo que \n                clientes de toda SÃ£o Paulo pudessem saborear nossos cupcakes. Foi quando desenvolvemos \n                nosso sistema de entrega rÃ¡pida e embalagens especiais que mantÃªm o frescor.\n              </p>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Hoje, atendemos mais de 10.000 clientes satisfeitos e temos planos de expandir para \n                outras capitais brasileiras, sempre mantendo nossa essÃªncia artesanal.\n              </p>\n            </div>\n            <div className=\"lg:w-1/2\">\n              <img \n                src=\"https://images.unsplash.com/photo-1519869325930-281384150729?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Variedade de cupcakes gourmet da Doce DelÃ­cia\"\n                className=\"w-full h-full object-cover rounded-2xl\"\n                data-testid=\"img-growth\"\n              />\n            </div>\n          </div>\n        </section>\n\n        {/* Our Values */}\n        <section className=\"text-center\" data-testid=\"section-values\">\n          <h2 className=\"text-3xl font-serif font-bold text-foreground mb-8\">\n            Nossos Valores\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-card p-6 rounded-2xl shadow-lg\" data-testid=\"value-quality\">\n              <div className=\"text-5xl mb-4\">ð¥</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">Qualidade Premium</h3>\n              <p className=\"text-muted-foreground\">\n                Selecionamos apenas os melhores ingredientes para criar sabores Ãºnicos e inesquecÃ­veis.\n              </p>\n            </div>\n            <div className=\"bg-card p-6 rounded-2xl shadow-lg\" data-testid=\"value-artisanal\">\n              <div className=\"text-5xl mb-4\">ð©âð³</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">ProduÃ§Ã£o Artesanal</h3>\n              <p className=\"text-muted-foreground\">\n                Cada cupcake Ã© feito Ã  mÃ£o com tÃ©cnicas tradicionais e muito amor pela confeitaria.\n              </p>\n            </div>\n            <div className=\"bg-card p-6 rounded-2xl shadow-lg\" data-testid=\"value-innovation\">\n              <div className=\"text-5xl mb-4\">ð</div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-3\">InovaÃ§Ã£o Constante</h3>\n              <p className=\"text-muted-foreground\">\n                Desenvolvemos novos sabores sazonais e aperfeiÃ§oamos nossos processos continuamente.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Timeline */}\n        <section className=\"bg-gradient-to-r from-primary/10 to-secondary/10 rounded-2xl p-8\" data-testid=\"section-timeline\">\n          <h2 className=\"text-3xl font-serif font-bold text-foreground mb-8 text-center\">\n            Nossa Jornada\n          </h2>\n          <div className=\"space-y-6\">\n            <div className=\"flex items-start space-x-4\" data-testid=\"timeline-2014\">\n              <div className=\"bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center font-bold\">\n                2014\n              </div>\n              <div>\n                <h3 className=\"font-bold text-foreground\">FundaÃ§Ã£o</h3>\n                <p className=\"text-muted-foreground\">Maria Santos inicia a Doce DelÃ­cia na sua cozinha em Vila Madalena</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-4\" data-testid=\"timeline-2016\">\n              <div className=\"bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center font-bold\">\n                2016\n              </div>\n              <div>\n                <h3 className=\"font-bold text-foreground\">Primeira Loja</h3>\n                <p className=\"text-muted-foreground\">Abertura do primeiro ponto comercial e contrataÃ§Ã£o da equipe</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-4\" data-testid=\"timeline-2019\">\n              <div className=\"bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center font-bold\">\n                2019\n              </div>\n              <div>\n                <h3 className=\"font-bold text-foreground\">Plataforma Online</h3>\n                <p className=\"text-muted-foreground\">LanÃ§amento do e-commerce e sistema de delivery</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-4\" data-testid=\"timeline-2024\">\n              <div className=\"bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center font-bold\">\n                2024\n              </div>\n              <div>\n                <h3 className=\"font-bold text-foreground\">ConsolidaÃ§Ã£o</h3>\n                <p className=\"text-muted-foreground\">Mais de 10.000 clientes atendidos e planos de expansÃ£o nacional</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":8257},"client/src/contexts/DeliveryContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface DeliveryContextType {\n  cep: string;\n  available: boolean | null;\n  city: string;\n  state: string;\n  checkedAt: number | null;\n  setCep: (cep: string) => void;\n  setDeliveryInfo: (info: { available: boolean; city: string; state: string; cep: string }) => void;\n  clearDeliveryInfo: () => void;\n}\n\nconst DeliveryContext = createContext<DeliveryContextType | undefined>(undefined);\n\ninterface DeliveryProviderProps {\n  children: ReactNode;\n}\n\nexport function DeliveryProvider({ children }: DeliveryProviderProps) {\n  const [cep, setCep] = useState('');\n  const [available, setAvailable] = useState<boolean | null>(null);\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [checkedAt, setCheckedAt] = useState<number | null>(null);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem('delivery-check');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        // Only use saved data if it's recent (within 24 hours)\n        const now = Date.now();\n        if (parsed.checkedAt && (now - parsed.checkedAt) < 24 * 60 * 60 * 1000) {\n          setCep(parsed.cep || '');\n          setAvailable(parsed.available);\n          setCity(parsed.city || '');\n          setState(parsed.state || '');\n          setCheckedAt(parsed.checkedAt);\n        }\n      } catch (error) {\n        // Invalid saved data, ignore\n        localStorage.removeItem('delivery-check');\n      }\n    }\n  }, []);\n\n  // Save to localStorage when delivery info changes\n  useEffect(() => {\n    if (checkedAt) {\n      const dataToSave = {\n        cep,\n        available,\n        city,\n        state,\n        checkedAt\n      };\n      localStorage.setItem('delivery-check', JSON.stringify(dataToSave));\n    }\n  }, [cep, available, city, state, checkedAt]);\n\n  const setDeliveryInfo = (info: { available: boolean; city: string; state: string; cep: string }) => {\n    setCep(info.cep);\n    setAvailable(info.available);\n    setCity(info.city);\n    setState(info.state);\n    setCheckedAt(Date.now());\n  };\n\n  const clearDeliveryInfo = () => {\n    setCep('');\n    setAvailable(null);\n    setCity('');\n    setState('');\n    setCheckedAt(null);\n    localStorage.removeItem('delivery-check');\n  };\n\n  return (\n    <DeliveryContext.Provider value={{\n      cep,\n      available,\n      city,\n      state,\n      checkedAt,\n      setCep,\n      setDeliveryInfo,\n      clearDeliveryInfo\n    }}>\n      {children}\n    </DeliveryContext.Provider>\n  );\n}\n\nexport function useDelivery() {\n  const context = useContext(DeliveryContext);\n  if (context === undefined) {\n    throw new Error('useDelivery must be used within a DeliveryProvider');\n  }\n  return context;\n}","size_bytes":2799},"client/src/pages/OrderTracking.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  ArrowLeft, \n  Package, \n  CheckCircle, \n  Clock, \n  Truck, \n  MapPin,\n  ShoppingBag,\n  Calendar,\n  X\n} from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport type { Order, OrderItem, Product } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface OrderWithItems extends Order {\n  orderItems: (OrderItem & { product: Product })[];\n}\n\nexport default function OrderTracking() {\n  const { id } = useParams();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: order, isLoading, error } = useQuery<OrderWithItems>({\n    queryKey: [`/api/orders/${id}`],\n    enabled: isAuthenticated && !!id,\n  });\n\n  const cancelOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest('PUT', `/api/orders/${orderId}/cancel`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pedido cancelado\",\n        description: \"Seu pedido foi cancelado com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/orders/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao cancelar\",\n        description: error.message || \"NÃ£o foi possÃ­vel cancelar o pedido.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const canCancelOrder = (status: string) => {\n    return status === 'pending' || status === 'confirmed';\n  };\n\n  const handleCancelOrder = (orderId: string) => {\n    if (confirm('Tem certeza que deseja cancelar este pedido?')) {\n      cancelOrderMutation.mutate(orderId);\n    }\n  };\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para acessar seus pedidos\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Skeleton className=\"h-8 w-48 mb-6\" />\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-32 rounded-2xl\" />\n            <Skeleton className=\"h-64 rounded-2xl\" />\n            <Skeleton className=\"h-48 rounded-2xl\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (error || !order) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Package className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-2\">\n            Pedido nÃ£o encontrado\n          </h1>\n          <p className=\"text-muted-foreground mb-6\">\n            NÃ£o foi possÃ­vel encontrar este pedido ou vocÃª nÃ£o tem permissÃ£o para visualizÃ¡-lo.\n          </p>\n          <Link href=\"/profile\">\n            <Button data-testid=\"button-back-to-profile\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar ao Perfil\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const orderSteps = [\n    {\n      key: \"pending\",\n      label: \"Pedido Recebido\",\n      icon: ShoppingBag,\n      description: \"Seu pedido foi recebido e estÃ¡ sendo processado\"\n    },\n    {\n      key: \"confirmed\",\n      label: \"Confirmado\",\n      icon: CheckCircle,\n      description: \"Pagamento aprovado e pedido confirmado\"\n    },\n    {\n      key: \"preparing\",\n      label: \"Em Preparo\",\n      icon: Clock,\n      description: \"Nossos confeiteiros estÃ£o preparando seus cupcakes\"\n    },\n    {\n      key: \"ready\",\n      label: \"Pronto\",\n      icon: Package,\n      description: \"Pedido pronto para entrega\"\n    },\n    {\n      key: \"delivered\",\n      label: \"Entregue\",\n      icon: Truck,\n      description: \"Pedido entregue com sucesso\"\n    }\n  ];\n\n  const getCurrentStepIndex = (status: string) => {\n    if (status === \"cancelled\") return -1;\n    const index = orderSteps.findIndex(step => step.key === status);\n    return index >= 0 ? index : 0;\n  };\n\n  const currentStepIndex = getCurrentStepIndex(order.status);\n  const isCancelled = order.status === \"cancelled\";\n\n  const formatOrderStatus = (status: string) => {\n    const statusMap: Record<string, { label: string; variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\" }> = {\n      pending: { label: \"Pendente\", variant: \"outline\" },\n      confirmed: { label: \"Confirmado\", variant: \"secondary\" },\n      preparing: { label: \"Em Preparo\", variant: \"default\" },\n      ready: { label: \"Pronto\", variant: \"secondary\" },\n      delivered: { label: \"Entregue\", variant: \"default\" },\n      cancelled: { label: \"Cancelado\", variant: \"destructive\" },\n    };\n    return statusMap[status] || { label: status, variant: \"outline\" as const };\n  };\n\n  const statusInfo = formatOrderStatus(order.status);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/profile\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-serif font-bold text-foreground\" data-testid=\"text-order-title\">\n                Pedido #{order.id.slice(-8)}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Acompanhe o progresso do seu pedido\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Badge variant={statusInfo.variant} className=\"text-sm\" data-testid=\"badge-order-status\">\n              {statusInfo.label}\n            </Badge>\n            {canCancelOrder(order.status) && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => handleCancelOrder(order.id)}\n                disabled={cancelOrderMutation.isPending}\n                data-testid={`button-cancel-order-${order.id}`}\n                className=\"text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              >\n                <X className=\"h-4 w-4 mr-1\" />\n                Cancelar\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Order Progress */}\n        <div className=\"bg-card rounded-2xl p-6 shadow-lg mb-6\">\n          <h2 className=\"text-xl font-serif font-bold text-foreground mb-6\">\n            Status do Pedido\n          </h2>\n          \n          {isCancelled ? (\n            <div className=\"text-center py-8\">\n              <div className=\"w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"h-8 w-8 text-destructive\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-destructive mb-2\">\n                Pedido Cancelado\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Este pedido foi cancelado. Entre em contato conosco se tiver dÃºvidas.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {orderSteps.map((step, index) => {\n                const isCompleted = index <= currentStepIndex;\n                const isCurrent = index === currentStepIndex;\n                const IconComponent = step.icon;\n                \n                return (\n                  <div key={step.key} className=\"flex items-start space-x-4\">\n                    <div className={`\n                      w-12 h-12 rounded-full flex items-center justify-center transition-colors\n                      ${isCompleted \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-muted-foreground'\n                      }\n                      ${isCurrent ? 'ring-4 ring-primary/20' : ''}\n                    `}>\n                      <IconComponent className=\"h-6 w-6\" />\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className={`\n                          font-semibold transition-colors\n                          ${isCompleted ? 'text-foreground' : 'text-muted-foreground'}\n                        `}>\n                          {step.label}\n                        </h3>\n                        {isCompleted && (\n                          <CheckCircle className=\"h-4 w-4 text-primary\" />\n                        )}\n                      </div>\n                      <p className={`\n                        text-sm transition-colors\n                        ${isCompleted ? 'text-muted-foreground' : 'text-muted-foreground/60'}\n                      `}>\n                        {step.description}\n                      </p>\n                    </div>\n                    \n                    {index < orderSteps.length - 1 && (\n                      <div className=\"absolute left-6 mt-12 w-px h-6 bg-border\"></div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Order Details */}\n          <div className=\"bg-card rounded-2xl p-6 shadow-lg\">\n            <h2 className=\"text-xl font-serif font-bold text-foreground mb-6\">\n              Detalhes do Pedido\n            </h2>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Data do Pedido</span>\n                <div className=\"flex items-center space-x-2 text-foreground\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span data-testid=\"text-order-date\">\n                    {order.createdAt ? new Date(order.createdAt).toLocaleDateString('pt-BR', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    }) : 'Data nÃ£o disponÃ­vel'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Total do Pedido</span>\n                <span className=\"font-bold text-primary text-lg\" data-testid=\"text-order-total\">\n                  R$ {parseFloat(order.total).toFixed(2).replace('.', ',')}\n                </span>\n              </div>\n\n              {order.appliedCouponCode && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Cupom Aplicado</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-foreground\">\n                      {order.appliedCouponCode}\n                    </div>\n                    <div className=\"text-sm text-destructive\">\n                      -R$ {parseFloat(order.discountAmount || \"0\").toFixed(2).replace('.', ',')}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"flex items-start space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground mt-1\" />\n                  <div>\n                    <span className=\"text-sm text-muted-foreground block\">EndereÃ§o de Entrega</span>\n                    <p className=\"text-foreground\" data-testid=\"text-delivery-address\">\n                      {order.deliveryAddress}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Order Items */}\n          <div className=\"bg-card rounded-2xl p-6 shadow-lg\">\n            <h2 className=\"text-xl font-serif font-bold text-foreground mb-6\">\n              Itens do Pedido\n            </h2>\n            \n            <div className=\"space-y-4\">\n              {order.orderItems?.map((item, index) => (\n                <div key={index} className=\"flex items-center space-x-4 pb-4 border-b border-border last:border-b-0\">\n                  <img \n                    src={item.product.imageUrl} \n                    alt={item.product.name}\n                    className=\"w-16 h-16 object-cover rounded-xl\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-foreground\">\n                      {item.product.name}\n                    </h4>\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Quantidade: {item.quantity}\n                      </span>\n                      <span className=\"font-semibold text-primary\">\n                        R$ {parseFloat(item.price).toFixed(2).replace('.', ',')}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Help Section */}\n        <div className=\"bg-card rounded-2xl p-6 shadow-lg mt-6\">\n          <h3 className=\"font-serif font-bold text-foreground mb-4\">\n            Precisa de Ajuda?\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground mb-2\">\n                ð <strong>Telefone:</strong> (11) 99999-9999\n              </p>\n              <p className=\"text-muted-foreground\">\n                âï¸ <strong>E-mail:</strong> contato@docedelicia.com.br\n              </p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground mb-2\">\n                ð <strong>HorÃ¡rio de Atendimento:</strong>\n              </p>\n              <p className=\"text-muted-foreground\">\n                Segunda a Domingo: 8h Ã s 20h\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14959},"client/src/pages/Orders.tsx":{"content":"import { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Package, \n  Calendar,\n  MapPin,\n  ArrowRight,\n  ShoppingBag,\n  X\n} from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport type { Order } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Orders() {\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: orders, isLoading, error } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const cancelOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest('PUT', `/api/orders/${orderId}/cancel`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pedido cancelado\",\n        description: \"Seu pedido foi cancelado com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao cancelar\",\n        description: error.message || \"NÃ£o foi possÃ­vel cancelar o pedido.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const canCancelOrder = (status: string) => {\n    return status === 'pending' || status === 'confirmed';\n  };\n\n  const handleCancelOrder = (orderId: string) => {\n    if (confirm('Tem certeza que deseja cancelar este pedido?')) {\n      cancelOrderMutation.mutate(orderId);\n    }\n  };\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Login necessÃ¡rio\",\n        description: \"FaÃ§a login para acessar seus pedidos\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Skeleton className=\"h-8 w-48 mb-6\" />\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32 rounded-2xl\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: \"Pendente\", variant: \"secondary\" as const },\n      confirmed: { label: \"Confirmado\", variant: \"default\" as const },\n      preparing: { label: \"Preparando\", variant: \"default\" as const },\n      ready: { label: \"Pronto\", variant: \"default\" as const },\n      delivered: { label: \"Entregue\", variant: \"default\" as const },\n      cancelled: { label: \"Cancelado\", variant: \"destructive\" as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return (\n      <Badge variant={config.variant} data-testid={`status-${status}`}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Data nÃ£o disponÃ­vel\";\n    return new Date(date).toLocaleDateString(\"pt-BR\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const formatPrice = (price: string) => {\n    return `R$ ${parseFloat(price).toFixed(2).replace('.', ',')}`;\n  };\n\n  if (error || !orders) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Package className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h1 className=\"text-2xl font-serif font-bold text-foreground mb-2\">\n            Erro ao carregar pedidos\n          </h1>\n          <p className=\"text-muted-foreground mb-6\">\n            NÃ£o foi possÃ­vel carregar seus pedidos. Tente novamente.\n          </p>\n          <Button onClick={() => window.location.reload()}>\n            Tentar Novamente\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (orders.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-serif font-bold text-foreground mb-8\">\n            Meus Pedidos\n          </h1>\n          \n          <div className=\"text-center py-12\">\n            <ShoppingBag className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-serif font-bold text-foreground mb-2\">\n              Nenhum pedido encontrado\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              VocÃª ainda nÃ£o fez nenhum pedido. Que tal explorar nossos deliciosos cupcakes?\n            </p>\n            <Link href=\"/catalog\">\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                Ver CatÃ¡logo\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-serif font-bold text-foreground mb-8\" data-testid=\"heading-orders\">\n          Meus Pedidos\n        </h1>\n        \n        <div className=\"space-y-4\">\n          {orders.map((order) => (\n            <div \n              key={order.id} \n              className=\"bg-card rounded-2xl p-6 shadow-sm border border-border hover:shadow-md transition-shadow\"\n              data-testid={`order-card-${order.id}`}\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Package className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <h3 className=\"font-medium text-foreground\" data-testid={`text-order-id-${order.id}`}>\n                      Pedido #{order.id.slice(-8)}\n                    </h3>\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span data-testid={`text-order-date-${order.id}`}>\n                        {formatDate(order.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  {getStatusBadge(order.status)}\n                  <div className=\"flex items-center space-x-2\">\n                    {canCancelOrder(order.status) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleCancelOrder(order.id)}\n                        disabled={cancelOrderMutation.isPending}\n                        data-testid={`button-cancel-order-${order.id}`}\n                        className=\"text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        Cancelar\n                      </Button>\n                    )}\n                    <Link href={`/order/${order.id}`}>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        data-testid={`button-view-order-${order.id}`}\n                      >\n                        Ver Detalhes\n                        <ArrowRight className=\"h-4 w-4 ml-1\" />\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-border\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    Entrega: \n                  </span>\n                  <span className=\"text-sm text-foreground font-medium\" data-testid={`text-delivery-address-${order.id}`}>\n                    {order.deliveryAddress || \"EndereÃ§o nÃ£o informado\"}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-end\">\n                  <span className=\"text-lg font-bold text-primary\" data-testid={`text-order-total-${order.id}`}>\n                    {formatPrice(order.total)}\n                  </span>\n                  {order.appliedCouponCode && (\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      Cupom: {order.appliedCouponCode}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-8 text-center\">\n          <Link href=\"/catalog\">\n            <Button variant=\"outline\">\n              Fazer Novo Pedido\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9387}},"version":1}